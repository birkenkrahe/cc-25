#+TITLE:Arrays
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:CSC100 Introduction to programming in C/C++ - Spring 2025
#+STARTUP: overview hideblocks indent inlineimages
#+OPTIONS: ^:nil num:nil
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :exports both :results output :comments both
#+PROPERTY: header-args:python :results output :exports output
#+PROPERTY: header-args:R :results output :exports output
* README

- This script introduces C arrays - an important /data structure/.

- Practice workbooks, input files and PDF solution files in GitHub

- This section, including some sample code, is based on chapter 6 in
  Davenport/Vine (2015) and chapter 8 in King (2008).

- For the 2025 update, some parts were modified with the help of
  generative AI (Grok 3, ChatGPT-4o).

* Overview

- Variables that can hold only a single data item (a number or a
  character, which is a number, too) are called *scalars*: ~1~, ~'a'~

- In mathematics, /ordered tuples/ of data (x_{1},...x_{n}) are called
  *vectors*. In the R code below,a vector ~v~ is defined and printed:
  #+name: Rvec
  #+begin_src R
    c(1,2,3) -> v ## create a vector of three numbers
    v
  #+end_src

  #+RESULTS: Rvec
  : [1] 1 2 3

- In C there are two *aggregate* stuctures that can store /collections/
  of values: *arrays* and *structures*[fn:1].

- A *structure* is a forerunner of a *class*, a concept that becomes
  central in *C++*, which is also called "C with classes".

- Classes contain objects and their properties, and they are a core
  concept for *object-oriented programming* (OOP).

* Collections in other languages

- Different programming languages have different data structures. The
  language Python has *dictionaries*, the language R has *data frames*,
  and the language Lisp has *lists*:

- Example with *Python:* a /dictionary/ of car data.
  #+name: PyDict
  #+begin_src python :python python3
    thisDict = {
        "brand": "Ford",     # key: brand attribute, value: Ford
        "model": "Mustang",  # key: model attribute, value: Mustang
        "year": 1964         # key: year attribute, value: 1964
    }
    for key, value in thisDict.items():
        print(f"key: {key}, value: {value}")
  #+end_src

- Example with *R*: a /data frame/ of tooth growth data, consisting of
  three different vectors of the same length but different data types.
  #+name: Rdf
  #+begin_src R
    str(ToothGrowth)
  #+end_src

  #+RESULTS: Rdf
  : 'data.frame':       60 obs. of  3 variables:
  :  $ len : num  4.2 11.5 7.3 5.8 6.4 10 11.2 11.2 5.2 7 ...
  :  $ supp: Factor w/ 2 levels "OJ","VC": 2 2 2 2 2 2 2 2 2 2 ...
  :  $ dose: num  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ...

- For *Lisp*, /lists/ are the fundamental data structure:
  #+begin_src emacs-lisp
    (setq my-list '(1 2 3 4 5))
    (message "List contents: %s" my-list)
  #+end_src

- Emacs is programming in Lisp, which is also the oldest language for
  AI applications; Python is an important general purpose language
  which dominates machine learning; and R is a language for statistics
  and data visualization. If you study computer or data science at
  Lyon, you will learn all of these languages.

* What is an array?

- An *array* is a /data structure/ containing a number of data values,
  all of which have the same type (like ~int~, ~char~ or ~float~).

- You can visualize arrays as sorted box collections.
  #+attr_html: :width 600px
  #+caption: Arrays of different dimensions with values in them
  [[../img/arrays.png]]

- The computer stores them differently - sequentially as a set of
  memory addresses.
  #+name: fig:storage
  #+attr_html: :width 600px
  #+caption: Memory representation of a 2D character array (Source: TheCguru.com)
  [[../img/storage.png]]

* One-dimensional arrays

- The simplest kind of array has one dimension - conceptually
  arranged visually in a single row (or column).
  #+attr_html: :width 600px
  #+caption: Visualization of a 1-dim array 'a' (Source: King)
  [[../img/one.png]]

- Each element of an array of type T is treated as if it were a
  variable of type T. Here are three short examples:
  #+name: ex:oneDimArrays
  #+begin_example C
    for ( int i = 0; i < N; i++ )
      a[i] = 0;                    /* clears a */

    for ( int i = 0; i < N; i++ )
      scanf("%d", &a[i]);          /* reads data into a */

    for ( int i = 0; i < N; i++ )
      sum += a[i];                 /* sums the elements of a */
                                   /* sum += a[i] => sum = sum + a[i] */
    #+end_example

* Declaring arrays

- To declare an array, we must specify the /type/ and /number/ of its
  elements, e.g. for an array of 10 elements:
  #+name: pgm:arrayDef
  #+begin_src C
    int a[10];           // declare array a of 10 integers
    printf("a[0] = %d\na[9] = %d\n",
           a[1], a[9]);  // print two array elements
  #+end_src

  #+RESULTS: pgm:arrayDef
  : a[0] = 0
  : a[9] = 0

- The array must be initialized, just like any scalar variable, to
  be of use to us (otherwise strange values may appear):
  #+begin_src C
    int a[10];
    for (int i=0;i<10;i++) printf("%d ",a[i]);
  #+end_src

  #+RESULTS:
  : 2 0 -1075053569 0 -1715821383 32767 100 0 4096 0

- You can initialize arrays explicitly using ~{...}~:
  #+begin_src C :results silent
    int int_array[5] = {1,2,3,4,5};  // initialize with integers
    double double_array[] = {2.1, 2.3, 2.4, 2.5}; // initialize with floats
    char char_array[] = {'h','e','l','l','o','\0'}; // initialize with chars
  #+end_src
  This is how ~char_array~ looks like (the last character ~\0~ is only a
  terminating character):
  #+attr_html: :width 600px
  [[../img/hello.png]]

- Control over start/finish of arrays is essential, otherwise you
  incur a so-called /memory overflow/:
#+begin_src C
  char c1[] = {'h','e','l','l','o','\0'}; // initialize with chars
  char c2[] = {'h','e','l','l','o'}; // initialize with chars
  printf("%s\n%s",c1,c2);
#+end_src

* TODO Practice Exercises: Declaring Arrays in C

** Reading array values

- *Question*: What values do you expect this program to print? Explain
  the output.

  #+begin_src C
    int arr[4] = {10, 20};
    printf("arr[0] = %d\n", arr[0]);
    printf("arr[1] = %d\n", arr[1]);
    printf("arr[2] = %d\n", arr[2]);
    printf("arr[3] = %d\n", arr[3]);
  #+end_src

  #+RESULTS:
  : arr[0] = 10
  : arr[1] = 20
  : arr[2] = 0
  : arr[3] = 0

- *Explanation*
  #+begin_quote
  Only the first two values are initialized; the rest default to zero
  (compiler-dependent - in truth, =arr[3]= and =arr[4]= are undefined).
  #+end_quote

** Default values and garbage data

- *Question*: What happens when you declare an array without
  initializing it? What values do you see and why?

  #+begin_src C
    int nums[6]; // define an array with 6 values
    for (int i = 0; i < 6; i++) {
      printf("%d ", nums[i]); // print the uninitialized values
     }
  #+end_src

  #+RESULTS:
  : -1512195911 32766 100 0 4096 0

- *Explanation*:
  #+begin_quote
  Uninitialized local arrays contain garbage values — leftovers in
  memory.
  #+end_quote

** Fixing initialization

- *Question*: Update the previous program and initialize the array in
  two different ways.

*** Initialize array values with a loop

- Initialize the array =nums= to the value 1:
  #+begin_src C :results output :exports both
    int nums[6];
    for (int i = 0; i < 6; i++) {
      nums[i] = 1;
      printf("%d ", nums[i]);
     }
  #+end_src

*** Initialize array with an initializer list

- Initialize the array =nums= to the value 1 using an initializer list.
  #+begin_src C :results output :exports both
    int nums[6] = {1,1,1,1,1,1};
    for (int i = 0; i < 6; i++) printf("%d ", nums[i]);
    printf("\n");
  #+end_src

** Character array experiments

- *Question*: What will this code print? Why does =word1= behave
  differently from =word2=?

  #+begin_src C
    char word1[] = {'h','e','l','l','o'};
    char word2[] = {'h','e','l','l','o','\0'};
    printf("word1: %s\n", word1);
    printf("word2: %s\n", word2);
  #+end_src

  #+RESULTS:
  : word1: hellohello
  : word2: hello

- *Explanation*
  #+begin_quote
  =word1= lacks the ~null~ character ~\0~, so =printf("%s", ...)= runs past
  its end and prints whatever happens to be there in the memory.
  #+end_quote

- Strings like "hello" are stored as arrays. This is how you will do
  it later:
  #+begin_src C
    char *word = "hello"; // `word` is a `char` pointer to `h`
    printf("word: %s\n", word); // prints the string

    for (int p=0; p < 5 ; p++) { // pointer arithmetic
      printf("word: %c\n", word[p]);
     }
  #+end_src

** Practice writing declarations

*Task*: Write C declarations for the following array scenarios, then
print them.

1. An array =a= of 10 integers.
2. An array =b= of 5 floats initialized to 1.1, 2.2,...,5.5
3. A character array =c= initialized to the word "Hi"
4. An array =d= of 100 doubles initialized to 0 (print first and last
   five elements only)

*Solution:*
#+begin_src C :results output :exports both
  // 1. An array of 10 integers
  int a[10];
  for (int i=0;i<10;i++) printf("%d ", a[i]);
  // 2. An array of 5 floats initialized to 1.1, 2.2, ..., 5.5
  float b[] = {1.1, 2.2, 3.3, 4.4, 5.5}; puts("");
  for (int i=0;i<5;i++) printf("%.1f ", b[i]); puts("");
  // 3. A character array initialized to the word "Hi"
  char c[] = {'H', 'i', '\0'};
  for (int i=0;i<2;i++) printf("%c ", c[i]); puts("");
  // 4. An array of 100 doubles initialized to 0
  // PRINT the first and the last five elements only
  double d[100] = {0};
  for (int i=0; i < 100; i++) {
    if (i < 5 || i > 94)
      printf("%g ", d[i]);
   }
#+end_src

#+RESULTS:
: 941707657 23394 941718960 23394 142495808 29597 142335857 29597 1 0
: 1.1 2.2 3.3 4.4 5.5
: H i
: 0 0 0 0 0 0 0 0 0 0

* Array length

- An array can have any length. Since the length may have to be
  adjusted, it can be useful to define it as a macro with ~#define~.
  #+begin_src C :results silent
    #define N 10  // directive to define N = 10 everywhere
    int a[N]; // declare array of length N
  #+end_src

- Remember that now ~N~ will *blindly* be replaced by ~10~ *everywhere* in the
  program by the pre-processor.

* Array subscripting side effects
** C is very permissive

- C does not require that the subscript bounds be checked.

- If a subscript goes out of bounds, the program's behavior is
  undefined.

- An array subscript may be an integer expression, therefore it's easy
  to miss subscript violations.
  #+begin_example C
    foo[i+j*10] = 0; // e.g. i=-10, j=1 => foo[0]
    bar[i++];        // e.g. i = -1 => bar[0]
  #+end_example

** Weird ~while~ loop

- As an example for the weird effects, trace this code:
  #+name: trace
  #+begin_example C
    i = 0;
    while ( i < N )
       a[i++] = 0;
  #+end_example

- After ~i~ is set to ~0~, the ~while~ statement checks whether ~i~ is less
  than ~N~: to test this, we need to introduce a support variable.
  #+name: pgm:arrayTest
  #+begin_src C
    #define N 10
    int i = 0, a[N]; int j;
    while ( i < N ) {
      printf("%d < %d\t", i, N);  // print condition
      j = i;  // support variable
      a[i++] = 0; // store 0 in a[i] then i = i + 1
      printf("a[%d] = %d\n", j, a[j]); // print i then a[i]
     }
  #+end_src

  #+RESULTS: pgm:arrayTest
  #+begin_example
  0 < 10        a[0] = 0
  1 < 10        a[1] = 0
  2 < 10        a[2] = 0
  3 < 10        a[3] = 0
  4 < 10        a[4] = 0
  5 < 10        a[5] = 0
  6 < 10        a[6] = 0
  7 < 10        a[7] = 0
  8 < 10        a[8] = 0
  9 < 10        a[9] = 0
  #+end_example

- Without the support variable, we would get weird printing results:
  can you explain them?
  #+name: pgm:arrayTest1
  #+begin_src C
    #define N 10
    int i = 0, a[N];
    while ( i < N ) {
      printf("%d < %d\t", i, N);  // print condition
      a[i++] = 0; // store 0 in a[i] then i = i + 1
      printf("a[%d] = %d\n", i, a[i]); // print i then a[i]
     }
  #+end_src

  #+RESULTS: pgm:arrayTest1
  #+begin_example
  0 < 10        a[1] = 0
  1 < 10        a[2] = -1075053569
  2 < 10        a[3] = 0
  3 < 10        a[4] = 1307722377
  4 < 10        a[5] = 32765
  5 < 10        a[6] = 100
  6 < 10        a[7] = 0
  7 < 10        a[8] = 4096
  8 < 10        a[9] = 0
  9 < 10        a[10] = -308507648
  #+end_example

- *Explanation 1:*
  #+begin_quote
  In the second program the condition test is printed alright, because
  ~i~ has not been incremented. But after the assignment, ~a[i]~ is the
  next index that has not been assigned a 0 yet, so all values are
  random.  When we print ~a[1]~ for example, it has not been assigned to
  ~0~ yet. ~a[10]~ is not declared or assigned a value at all, because
  ~a[N]~ has the elements ~{a[0] ... a[N-1]}~.

  | It. | i (before) | a[i++] = 0 sets | i (after) | a[i] in printf     |
  |-----+------------+-----------------+-----------+--------------------|
  |   1 |          0 | a[0] = 0        |         1 | a[1] uninitialized |
  |   2 |          1 | a[1] = 0        |         2 | a[2] uninitialized |

  #+end_quote

- What'd happen if the assignment were with ~a[++i]~ instead of ~a[++i]~?
  #+name: pgm:arrayTest2
  #+begin_src C :flags
    #define N 10
    int i = 0, a[N]; int j;
    while ( i < N ) {
      printf("%d < N\t", i);  // print condition
      j = i;  // support variable
      a[++i] = 0; // store 0 in a[i] then i = i + 1
      printf("a[%d] = %d\n", j, a[j]); // print i then a[i]
     }
  #+end_src

  Result:
  #+begin_quote
  "stack smashing detected" = attempt to write out of bounds.

  | It. | i (before) | j = i | ++i | a[i] = 0 sets | a[j] printed        |
  |-----+------------+-------+-----+---------------+---------------------|
  |   1 |          0 |     0 |   1 | a[1] = 0      | a[0] undefined      |
  |   2 |          1 |     1 |   2 | a[2] = 0      | a[1] undefined      |
  | ... |        ... |   ... | ... | ...           | ...                 |
  |  10 |          9 |     9 |  10 | ❌ a[10] = 0 | a[10] out of bounds  |
  #+end_quote

  On Windows, you'd get this answer (I have no idea why):
  #+begin_example
  0 < N a[0] = 66110
  1 < N a[1] = 0
  2 < N a[2] = 0
  3 < N a[3] = 0
  4 < N a[4] = 0
  5 < N a[5] = 0
  6 < N a[6] = 0
  7 < N a[7] = 0
  8 < N a[8] = 0
  9 < N a[0] = 66110
  #+end_example

- *Explanation 2:*
  #+begin_quote
  ~a[++i]~ would not be right, because ~0~ would be assigned to ~a[0]
  during the first loop iteration - remember that ~++i~ increments ~i~
  first and then stores the result in ~i~. The last iteration tries to
  assign 0 to ~a[11]~ which is undeclared. You can test that by
  initializing ~int i = -1~ at the start. Same problem at the end, for
  ~i=9~, the computer tries to initialize ~a[10]~, which is not declared -
  "stack smashing" means that the computer tries to write beyond its
  defined boundaries.
  #+end_quote

** Copying arrays into one another

- Be careful when an array subscript has a side effect. Example: the
  following loop to copy all elements of ~foo~ into ~bar~ may not work
  properly:
  #+name: copy1
  #+begin_example C
    i = 0;
    while (i < N)
      a[i] = b[i++];
  #+end_example

- The statement in the loop accesses the value of ~i~ and modifies
  ~i~. This causes undefined behavior. To do it right, use this code:
  #+name: copy2
  #+begin_example C
  for (i = 0; i < N; i++)
      a[i] = b[i];
  #+end_example

- This is one example where the =while= loop is not the same as the =for=
  loop.

** Weird ~for~ loop

- This innocent-looking ~for~ statement can cause an infinite loop:
  #+name: ex:infArray
  #+begin_example C
  int a[10], i;

  for ( i = 1; i <= 10; i++)
    a[i] = 0;
#+end_example

- Explanation:* when ~i~ reaches ~10~, the program stores ~0~ in ~a[10]~. But
  ~a[10]~ does not exist (the array ends with ~a[9]~), so ~0~ goes into
  memory immediately after ~a[9]~. If the variable ~i~ happens to follow
  ~a[9]~ in memory, then ~i~ will be reset to ~0~, causing the loop to start
  over!

- "Stack smashing" because we're writing out of bounds (=a[10]=):
  #+begin_src C :results silent
    int a[10], i;

    for ( i = 1; i <= 10; i++)
      a[i] = 0;
  #+end_src

- Why "stack smashing"?
  #+begin_quote
  You have corrupted part of the *stack frame* which is where local
  variables are stored. A *stack canary* guards the stack (like a canary
  in a coal mine, who died in the presence of toxic gases).
  #+end_quote

- Illustration of a "stack frame" for the ~main~ function followed by
  stack frames for other functions, forming the full *call stack* of
  routines (and their variables) that can be called.

* Iterating over arrays

- ~for~ loops are made for arrays. Here are a few examples. Can you
  see what each of them does?
  #+name: ex:for_array_1
  #+begin_example C
    for (i = 0; i < 10 ; i++ )
      a[i] = 0;
  #+end_example
  #+begin_quote
  *Answer 1:* ~0~ is assigned to ~a[0]~ through ~a[9]~.
  #+end_quote
  #+name: ex:for_array_2
  #+begin_example C
    for (i = 0; i < 10 ; i++ )
      scanf("%d", &a[i]);
  #+end_example
  #+begin_quote
  *Answer 2:* external integer input is assigned to ~a[0]~ through ~a[9]~.
  #+end_quote
  #+name: ex:for_array_3
  #+begin_example C
    for (i = 0; i < 10 ; i++ )
      sum += a[i];
  #+end_example
  #+begin_quote
  *Answer 3:* The values ~a[0]~ through ~a[9]~ are summed up: ~sum = sum +
  a[i=1] = sum + a[i=1] + a[i=0] ...~
  #+end_quote

* TODO Iteration practice

- These short problems build on the three examples you’ve just seen.
- Open a new file at OneCompiler.Com and put all of these into it.

** Initialization with Pattern

- Initialize the array =a= with the values 1,2, ..., 10 using a ~for~
  loop that starts at i = 0;
  #+begin_src C
    // Initialize the array a with the values 1, 2, ..., 10
    // using a for loop
    /******************************************************/
    // SET array a of 10 elements
    int a[10];
    // FOR i from 0 to 10: DO
    for (int i = 0; i < 10; i++) {
      // initialize array elements
      a[i] = i + 1;
      // PRINT array element
      printf("%d ", a[i]);
     } // END FOR
  #+end_src

  #+RESULTS:
  : 1 2 3 4 5 6 7 8 9 10

** Input and Count

- Read 5 whole (non-negative integer) numbers into an array =b= and
  count how many of them are even:
  #+begin_src C :cmdline < input
    // Read 5 integers into an array and count
    // how many of them are even numbers.
    /******************************************************/
    // SET array b of 5 elements
    int b[5];
    // SET count to 0
    int count = 0;
    // PRINT "Enter 5 whole numbers:"
    printf("Enter 5 whole numbers: ");
    // FOR i from 0 to 10: DO
    for (int i = 0; i < 5; i++) {
      // READ array element
      scanf("%d",&b[i]);
      // PRINT array element
      printf("%d ",b[i]);
      // IF array element even
      if (b[i] % 2 == 0) {
        // ADD 1 to count
        count++;
      } // END IF
     } // END FOR
    // PRINT "Number of even values = " + count
    printf("\nNumber of even values = %d\n", count);
  #+end_src

  #+RESULTS:
  : Enter 5 whole numbers: 10 21 33 4 5 
  : Number of even values = 2

- How could this be generalized?
  #+begin_quote
  1. Accepting arrays of any length.
  2. Aborting gracefully when entry is not a whole number.
  #+end_quote

- Input:
  #+begin_src bash :results output :exports both
    echo 10 21 33 4 5 > input
    cat input
  #+end_src

  #+RESULTS:
  : 10 21 33 4 5

** Conditional Summation

- Initialize an array =c= of 10 elements, and only sum up the positive
  values in the array.

- Sample input: 3, -1, 7, 0, -5, 2, 8, -3, 6, -2.

- Sample output: 26.

- Solution:
  #+begin_src C
    // Sum up only the *positive* values in the array.
    /******************************************************/
    // SET array c of 10 elements
    int c[10] = { 3, -1, 7, 0, -5, 2, 8, -3, 6, -2 };
    // SET sum of positive values to 0
    int sum = 0;
    // FOR i from 0 to 10; DO
    for (int i = 0; i < 10; i++) {
      // IF element of c greater than 0
      if (c[i] > 0) {
        // ADD element to sum
        sum += c[i];
      } // END IF
     } // END FOR
    // PRINT "Sum of positive values
    printf("Sum of positive values: %d\n", sum);
  #+end_src

  #+RESULTS:
  : Sum of positive values: 26

- How could this be generalized?
  #+begin_quote
  1. Accepting arrays of any length.
  2. Aborting gracefully when entry is not a whole number.
  #+end_quote

* Initalizing arrays with /designated initializers (C99)/

- You can give default values to arrays if you want to change only
  few elements, e.g. here:
  #+begin_example C
    int a[15] = {0,0,29,0,0,0,0,0,0,0,7,0,0,0,48};
  #+end_example

- When you initialize explicitly, you don't have to specify the number
  of elements on the left hand side:
  #+begin_example C
    int b[] = {0,0,29,0,0,0,0,0,0,0,7,0,0,0,0,48};
  #+end_example

- You can only initialize non-zero elements:
  #+begin_src C
    int c[] = { [2] = 29, [10] = 7, [14] = 48};

    for (int i=0;i<15;i++) printf("%d ",c[i]);
  #+end_src

  #+RESULTS:
  : 0 0 29 0 0 0 0 0 0 0 7 0 0 0 48

- Iterate over =c= and print only the non-zero elements:
  #+begin_src C
    int c[] = { [2] = 29, [10] = 7, [14] = 48};

    for (int i=0; i<15; i++)
      if (c[i]!=0) printf("%d ",c[i]);
  #+end_src

  #+RESULTS:
  : 29 7 48

* Multi-dimensional arrays

- An array may have any number of dimensions.

- Example: the following array declares a 5 x 9 matrix of 5 rows and
  9 columns.
  #+begin_src C :results silent
    int m[5][9]; // This goes from m[0][0] to m[4][8]
  #+end_src
  #+attr_html: :width 500px
  #+name: matrix
  #+caption: Matrix indexes in a 2-dim C array (Source: King)
  [[../img/matrix.png]]

- In a practice file, *declare* a 2 x 2 matrix named ~foo~ of floating
  point values.
  #+begin_src C
    float foo[2][2];
  #+end_src

- *Initialize* the matrix with zero values as you would initialize an
  one-dimensional array.
  #+begin_src C
    float foo[2][2] = {0.f};  // declare and init 2x2 floating matrix
  #+end_src

- Solution:
  #+begin_src C  :noweb yes
    // Declare a 4 x 4 matrix
    float foo[2][2] = {0.f};

    <<2x2>>
  #+end_src

  #+RESULTS:
  : 0 0
  : 0 0

- You can also initialize a matrix using designated initializers:
  #+begin_src C :noweb yes
    double foo[2][2] = {[0][0] = 1.0, [1][1] = 1.0}; // identity matrix
    <<2x2>>
  #+end_src

  #+RESULTS:

  #+begin_src C :noweb yes
    double foo[2][2] = {1.0, 0., 0.,1.0};
    <<2x2>>
  #+end_src

* Accessing arrays

- To access the element in row ~i~ and column ~j~, we must write ~m[i][j]~.

- To access row ~i~ of ~m~, we write ~m[i]~

- The expression ~m[i,j]~ is the same as ~m[j]~ (don't use it)

- C stores arrays not in 2 dim but in row-major order: In row-major
  order, the entire row is stored in sequence before moving to the
  next row.
  #+attr_html: :width 500px
  #+name: matrix
  #+caption: Row-major memory storage in C (Source: King)
  [[../img/stored.png]]

- Multi-dimensional arrays play a lesser role in C than in many
  other programming languages because C has a more flexible way to
  store multi-dimensional data, namely /arrays of pointers/.

- Practice! In the 4x4 matrix below, what are the values of:
  #+begin_src C :noweb yes
    int foo[4][4] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
    <<4x4>>
  #+end_src

  1. ~foo[0][0]~
     #+begin_quote
     0
     #+end_quote
  2. ~foo[1][3]~
     #+begin_quote
     7
     #+end_quote
  3. ~foo[2][1]~
     #+begin_quote
     9
     #+end_quote
  4. ~foo[4][4]~
     #+begin_quote
     Out of bounds!
     #+end_quote

- Let's check:
  #+begin_src C :noweb yes
    int foo[4][4] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
    <<[4x4]>>
  #+end_src

  #+RESULTS:
  : [0][0]:  0 [0][1]:  1 [0][2]:  2 [0][3]:  3
  : [1][0]:  4 [1][1]:  5 [1][2]:  6 [1][3]:  7
  : [2][0]:  8 [2][1]:  9 [2][2]: 10 [2][3]: 11
  : [3][0]: 12 [3][1]: 13 [3][2]: 14 [3][3]: 15

- Challenge: How would you declare a matrix of characters a,b,c,d?
  #+begin_src C
    // start with vector of four characters
    char vector[4] = {'a','b','c','d'};
    // iterate over elements to print
    for(int i=0; i<4; ++i) printf("%c ", vector[i]);

  #+end_src

  #+RESULTS:
  : a b c d

- In your practice file, start with a *vector* of characters a,b,c,d.
  #+begin_src C
    // start with vector of four characters
    char vector[4] = {'a','b','c','d'};
    // iterate over elements to print
    for(int i=0; i<4; ++i) printf("%c ", vector[i]);
  #+end_src

  #+RESULTS:
  : a b c d

- Then try a matrix (2 x 2):
  #+begin_src C :noweb yes
    // declare and initialize 2x2 matrix of characters
    char matrix[2][2] = {'a','b','c','d'};

    <<2x2_char>>
  #+end_src

  #+RESULTS:
  :
  : a b
  : c d

* Accessing arrays with nested ~for~ loops

- Nested ~for~ loops are ideal for processing multi-dimensional arrays.

- Practice! Declare and print a 2 x 2 array of floating-point values.
  #+begin_example
  0    3.14
  2.71 0
  #+end_example

- Write the pseudocode first:
  #+begin_example
  // declare & print 2x2 floating point matrix values 0,3.14,2.71,0

  // print matrix:
  // iterate over the matrix rows with `row`

       // iterate over the matrix columns `col`

          // print one element m[row][col]

  #+end_example

- Code:
  #+begin_src C
    // declare & print 2x2 floating point matrix values 0,3.14,2.71,0
    float foo[2][2]={ [0][1] = 3.14, [1][0] = 2.71 };
    // print matrix:
    // iterate over the matrix rows i
    for ( int row=0; row < 2; row++) {
      // iterate over the matrix columns j
      for ( int col=0; col < 2; col++) {
        // print one element m[row][col]
        printf("%3.2f ", foo[row][col]);
      }
      puts("");
     }
  #+end_src

  #+RESULTS:
  : 0.00 3.14
  : 2.71 0.00

- The following code code initializes a 10x10 /identity/ matrix.
  1) Set the dimension of the matrix to N = 10
  2) Declare a ~double~ matrix named ~ident~
  3) Loop over rows with loopindex ~row~
  4) For each row, loop over columns with column index ~col~
  5) Set each diagonal element ~ident[row][col]~ to 1, all others to 0
  6) Print the resulting matrix
  #+name: identityMatrix
  #+begin_src C
    #define N 5  // macro definition

    double ident[N][N];   // matrix dimension is N * N
    int row, col;         // loop indices for row and column

    for (row = 0; row < N; row++)
      {
        for (col = 0; col < N; col++)
          {
            if (row == col) {
              ident[row][col] = 1.0;
            } else {
              ident[row][col] = 0.0;
            }
            printf("%g ", ident[row][col]);
          }
        printf("\n");
      }
  #+end_src

  #+RESULTS: identityMatrix
  : 1 0 0 0 0
  : 0 1 0 0 0
  : 0 0 1 0 0
  : 0 0 0 1 0
  : 0 0 0 0 1

- By comparison, this is how easy it is to declare, create and print
  an identity matrix in a language that is built for math
  manipulation, R:
  #+begin_src R
    diag(5) #    diag
  #+end_src

  #+RESULTS:
  :      [,1] [,2] [,3] [,4] [,5]
  : [1,]    1    0    0    0    0
  : [2,]    0    1    0    0    0
  : [3,]    0    0    1    0    0
  : [4,]    0    0    0    1    0
  : [5,]    0    0    0    0    1

- To initialize an array, you can use brackets as in the 1-dim case,
  but for each dimension, you need a new set of ~[ ]~.

- What happens in the next code block? What do you think the output
  looks like?
  #+name: initArray
  #+begin_src C
    int m[3][3] = {1,2,3,4,5,6,7,8,9};

    for (int i=0;i<3;i++) {
      for(int j=0;j<3;j++) {
        printf("%d ", m[i][j]);
      }
      printf("\n");
     }
  #+end_src

  #+RESULTS: initArray
  : 1 2 3
  : 4 5 6
  : 7 8 9

- By comparison, in R this looks like:
  #+begin_src R
    (matrix(1:9,
            3,
            byrow=TRUE))
  #+end_src

  #+RESULTS:
  :      [,1] [,2] [,3]
  : [1,]    1    2    3
  : [2,]    4    5    6
  : [3,]    7    8    9

- How could you populate the matrix column-wise instead of row-wise?
  #+begin_quote Answer
  By swapping the indices in the print statement.
  #+end_quote

- Test it:
  #+begin_src C
    int m[3][3] = {1,2,3,4,5,6,7,8,9};

    for (int i=0;i<3;i++) {
      for(int j=0;j<3;j++) {
        printf("%d ", m[j][i]);  // prints matrix column-wise
      }
      printf("\n");
     }
  #+end_src

  #+RESULTS:
  : 1 4 7
  : 2 5 8
  : 3 6 9

- In R, that's the default, so the command is even shorter:
  #+begin_src R
    (matrix(1:9,3))
  #+end_src

  #+RESULTS:
  :      [,1] [,2] [,3]
  : [1,]    1    4    7
  : [2,]    2    5    8
  : [3,]    3    6    9

* The size of arrays

- The ~sizeof~ operator can determine the size of arrays (in bytes).

- If ~a~ is an array of ~10~ integers, then ~sizeof(a)~ is 40 provided
  each integer requires 4 bytes of storage.

- Write this in your practice file: The block below declares and
  initializes an array of 10 elements and prints its size in bytes.
  #+name: sizeof
  #+begin_src C :tangle sizeof.c
    int a[100000] = {0};  // initialize all array elements with 0
    printf("%ld", sizeof(a));
  #+end_src

  #+RESULTS: sizeof
  : 400000

- You can use the operator also to measure the size of an array:
  dividing the array size by the element size gives you the length of
  the array:
  #+begin_src C
    int a[10] = {0};
    printf("%d", sizeof(a)/sizeof(a[0])); // prints length of array a
  #+end_src

- You can use this last fact to write a ~for~ loop that goes over the
  whole /length/ of an array - then the array does not have to be
  modified if its length changes (see practice file).

* Use ~sizeof~ to print a matrix

- Example:
  #+name: sizeof1
  #+begin_src C
    int B[3][3] = {0};     // 3 * 3 = 9 array elements
    printf("%ld", sizeof(B));  // 9 * 4 = 36 bytes
  #+end_src

  #+RESULTS: sizeof1
  : 36

- If an array of ~N~ elements has length ~N * 4~ (one for every byte of
  length 4), what is the length of a matrix of size ~M x N~?
  #+begin_quote Answer
  It is the number of matrix elements (stored linearly) times the
  byte length. In the case of N = 4, M = 3 that is 4 * 3 * 4 = 48.
  #+end_quote

- Storing a matrix:
  #+name: 4x3matrix
  #+begin_src C :results silent
    #define M 4
    #define N 3
    int C[M][N] = {1,2,3,4,5,6,7,8,9,10,11,12};
  #+end_src

- Can we use ~sizeof~ when looping over rows and columns?
  #+name: matrixLoop
  #+begin_src C :noweb yes
    <<4x3matrix>>
    for (int i = 0; i < M ; i++) { // iterate over M rows
      for(int j = 0; j < N; j++) { // iterate over N columns
        printf("%3d", C[i][j]);
      }
      printf("\n"); // next row
     }
  #+end_src

  #+RESULTS: matrixLoop
  :  1  2  3
  :  4  5  6
  :  7  8  9
  : 10 11 12

- The length of the row vectors:
  #+begin_src C :noweb yes
    <<4x3matrix>>
    printf("%ld\n", sizeof(C)); // size of matrix C = M * N * 4
    printf("%ld\n", sizeof(C)/sizeof(C[0][0])); // size of row = 48 / 4
    printf("%ld\n", sizeof(C)/sizeof(C[0][0])*M/N); // size of column = 48 / 3
  #+end_src

  #+RESULTS:
  : 48
  : 12
  : 16

* Let's practice!

The last two problems in [[https://tinyurl.com/cpp-array-practice][tinyurl.com/cpp-array-practice]] can be solved
with what you've just heard (multi-dimensional arrays).

* Noweb chunks
#+name: 2x2
#+begin_src C :results silent
  for (int i=0;i<2;i++) {
    for (int j=0;j<2;j++) {
      printf("%.0f ",foo[i][j]);
    }
    printf("\n");
   }
#+end_src
#+name: 4x4
#+begin_src C :results silent
  for (int i=0;i<4;i++) {
    for (int j=0;j<4;j++) {
      printf("%3i ",foo[i][j]);
    }
    printf("\n");
   }
#+end_src
#+name: [4x4]
#+begin_src C :results silent
  for (int i=0;i<4;i++) {
    for (int j=0;j<4;j++) {
      printf("[%d][%d]:%3i ",i,j,foo[i][j]);
    }
    printf("\n");
   }
#+end_src
#+name: 2x2_char
#+begin_src C :results silent
  puts("");
  for (int i=0;i<2;i++) {
    for (int j=0;j<2;j++) {
      printf("%c ",matrix[i][j]);
    }
    printf("\n");
   }
#+end_src
#+name: 2x2_string
#+begin_src C :results silent
  for (int i=0;i<2;i++) {
    for (int j=0;j<2;j++) {
      printf("%s ",matrix[i][j]);
    }
    printf("\n");
   }
#+end_src
* References

- Davenport/Vine (2015) C Programming for the Absolute Beginner
  (3ed). Cengage Learning.
- Kernighan/Ritchie (1978). The C Programming Language
  (1st). Prentice Hall.
- King (2008). C Programming - A modern approach (2e). W A Norton.
- Orgmode.org (n.d.). 16 Working with Source Code [website]. [[https://orgmode.org/manual/Working-with-Source-Code.html][URL:
  orgmode.org]]
- Image [[fig:storage]] from: [[https://overiq.com/media/uploads/memory-representation-of-array-of-strings-1504599913892.png][TheCguru.com]]

* Footnotes

[fn:1]There are actually two others, unions and enumerations, but we
will not meet them in this introductory class.

#+TITLE: C FUNDAMENTALS PRACTICE - SCANF - EMACS
#+AUTHOR: [yourName] (pledged)
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output :exports both
#+STARTUP: hideblocks overview indent
* README

- This file is a practice file for C input functions ~scanf~.

- Time: approx. 30 min.

- When you're done with a section move the cursor on the section
  heading and type ~S-<right>~ (or SHIFT+<right-arrow>).

* TODO Reading input with =scanf=

- You can open the exercises here on GitHub whenever you're lost.
  [[https://tinyurl.com/scanf-practice][tinyurl.com/scanf-practice]]

- We'll do these in class together and you will upload your results to
  Canvas (~"In-class practice 7: scanf"~).

- You will learn:
  + How to open a cloud command-line terminal (aka shell)
  + Create a new file with GNU =nano=
  + Save and rename files
  + Change and make directories
  + List, move, delete and rename files
  + Compile with changing the object file name
  + Create an input file with =echo=
  + Run an executable using a relative path
  + Open the editor and download a file
  + Compress files and upload archive files to Canvas

* TODO Scan integer and floating-point input

*Problem*: Write a C program =scan1.c= that accepts two integer and two
floating-point values from the keyboard and prints them.

*Sample Input:*
#+begin_example
100 -1000 .456 -9.34e2
#+end_example

*Sample Output:*
#+begin_example
|  100|-1000|0.456| -934|
#+end_example

*Solution:*

1) Open a terminal.

2) Create a new file =scan1.c=.

3) Write the source code for a C program with input and output. Save
   at any point with =CTRL + s=.

4) Define two /integer/ variables ~k~, ~l~, and two /floating-point/ variables
   ~u~ and ~v~

5) Ask the user for input.

6) Complete the ~scanf~ /format string/ and enter the variables list to
   scan these variables

7) Save your file and compile it with =gcc= to check for syntax
   correctness. The standard executable is called =a.out=.

8) Run the executable using the relative path =./a.out= and enter the
   input by hand: ~100 -1000 .456 -9.34e2~

9) Alternatively, you can put the input into a file and redirect it to
   the executable. First create the input file:
   #+begin_src bash
     echo "100 -1000 .456 -9.34e2" > input1
     cat input1
   #+end_src

   #+RESULTS:
   : 100 -1000 .456 -9.34e2

10) Next, run the file using the =input1= file:
    #+begin_example sh
    ./a.out < input1
    #+end_example

11) Fix the =scanf= format until you get the desired output[fn:3]:
    #+name: pgm:scanf_out
    #+begin_example
     |  100|-1000|0.456| -934|
    #+end_example

12) Compile your file with =gcc= once more, and name the executable
    (object file) =scan1= with the command:
    #+begin_example sh
    gcc scan1.c -o scan1
    #+end_example

13) Run the file using the relative path to the file and the input
    data:
    #+begin_example
    ./scan1 < input1
    #+end_example

14) If everything works, download the file to your PC (~Open editor~,
    find the file in the sidebar, right-click to ~Download~).

15) Revisit all that you learnt before tackling the next one!
    #+begin_quote

|    | Concept/Action                       | Command/Code Example               |
|----+--------------------------------------+------------------------------------|
|  1 | Open a terminal                      | ~Open terminal~                      |
|  2 | Create a new file                    | =nano scan.c=                        |
|  3 | Compile with =gcc=                     | =gcc scan.c=                         |
|  4 | Relative file path                   | =ls ..=                              |
|  5 | Run executable with manual input     | =./a.out= <CR> 100                   |
|  6 | Create input file & view contents    | =echo "100" > input <CR> cat input=  |
|  7 | Run executable with redirected input | =./a.out < input=                    |
|  8 | Compile with specific output name    | =gcc scan.c -o scan=                 |
|  9 | Run named executable with input file | =./scanf < input=                    |
| 10 | Download the file to PC              | ~Open editor~ - ~Download~             |

    #+end_quote

=history= (commands), =ll= (long listing), =clear= (clean up), =*= (globbing).
* TODO Scanning ordinary characters

1) Copy the previous program =scan1.c= into a new program =scan2.c= so
   that you don't have to rewrite all the code:
   #+begin_example sh
   cp -v scan1.c scan2.c
   ls scan*
   #+end_example

2) Now edit =scan2.c= using this code:
   #+name: pgm:ordTest1
   #+begin_src C :cmdline < ord1
     // variable declarations
     int i,j;

     // ask for keyboard input
     puts("Enter two integers separated by `/`:");

     // read keyboard input
     scanf("%d/%d",&i,&j);

     // print keyboard input
     printf("|%5d|%5d|\n",i,j);
   #+end_src

3) Compile the source code file and rename the object file to =scan2=:
   #+begin_example sh
   gcc scan2.c -o scan2
   #+end_example

4) Run the code block below with two inputs to compare:
   - ~•5/•96~ - this input should succeed
   - ~•5 /•96~ - this input should fail for the second number
   - ~•.5 /•96~ - this input should fail for both numbers
* TODO Match input patterns exactly

This is useful for the programming exercise "phone numbers":

1) Copy the previous program =scan2.c= into a new program =scan3.c= so
   that you don't have to rewrite all the code.

2) Put the following into an input file =input3=: ~444==++//555~
   #+begin_example sh
   echo "444==++//555" > input3
   cat input3
   #+end_example

3) Delete the lines asking the user for input.

4) Make sure that the =scanf= command is formatted correctly to receive
   the input in =input3= and return the two integers with =printf=:
   #+begin_example sh
   The numbers were 444 and 555.
   #+end_example

5) Compile =scan3.c= and rename the object file to =scan3=.

6) Run the object file passing the input through =input3=
   #+begin_example sh
   ./scan3 < input3
   #+end_example
* TODO Add fractions

1) Use the following command on the command-line shell to copy a
   template program from GitHub that you can then fill in:
   #+begin_src bash :results output :exports both
     wget -O scan4.c tinyurl.com/scan4-c
   #+end_src

2) Put the following *sample input* in an input file:
   #+begin_example
   5/6•
   3/4
   #+end_example

3) To do this, run this code on the command-line:
   #+begin_src bash :results output
     echo "5/6 " > input4
     echo "3/4"  >> input4
     cat input
   #+end_src

   #+RESULTS:
   : 5/6
   : 3/4

4) The *sample output* for the input 5/6 and 3/4 is:
   #+begin_example
   5/6 + 3/4 = 38/24
   #+end_example

5) The program prompts the user to add two fractions and then display
   their sum. Complete the format strings below so that the program
   runs as intended!
   #+name: pgm:addFrac
   #+begin_src C :cmdline < addFrac_input :results output :tangle ../src/scan4.c
     // declare variables
     int num1, denom1, num2, denom2, result_num, result_denom;

     // scan input
     scanf("...", &num1, &denom1);
     scanf("...", &num2, &denom2);

     // compute numerator and denominator
     result_num = num1 * denom2 + num2 *denom1;
     result_denom = denom1 * denom2;

     // print result
     printf("%d/%d + %d/%d = %d/%d\n",
            num1, denom1, num2, denom2,
            result_num, result_denom);
   #+end_src

6) Compile the program into an object file =scan4= and run it with =input4=:
   #+begin_example sh
   gcc scan4.c -o scan4
   ./scan4 < input4
   #+end_example

7) When you got the right results, copy =scan4.c= into =scan5.c= using =cp
   -v=. Open the file with =nano=, update the filename at the top, and
   modify the program so that there is only *on* ~scanf~ statement. Make
   sure that the modified program yields the same result as before.

* TODO Submit results to Canvas

- At this point, you should have a bunch of =scan= and =input= files,
  including save files (=~=) and executables (object files):
  #+begin_example sh
    ls scan*.c input*
  #+end_example

  Output:
  #+begin_example
  input1  input4    scan2     scan2.cc~  scan3.cc  scan4.cc  scan5.cc  
  input3  scan1.cc  scan2.cc  scan3      scan4     scan5     scan5.cc~
  #+end_example

- Compress your source and input files into an archive file =scan.zip=
  (using the 'glob' character =*=):
  #+begin_example
  zip scan.zip scan1.c scan2.c scan3.c scan4.c scan5.c input*
  #+end_example
  Output:
  #+begin_example
  adding: scan1.cc (deflated 45%)
  adding: scan2.cc (deflated 48%)
  adding: scan3.cc (deflated 46%)
  adding: scan4.cc (deflated 52%)
  adding: scan5.cc (deflated 52%)
  adding: input1 (stored 0%)
  adding: input3 (stored 0%)
  adding: input4 (stored 0%)
  #+end_example

- You can look at the ZIP file with the command (finish by typing =q=):
  #+begin_example sh
    less sample.zip
  #+end_example

- This is what you should see:
  #+begin_example sh
    Archive:  scan.zip
   Length   Method    Size  Cmpr    Date    Time   CRC-32   Name
  --------  ------  ------- ---- ---------- ----- --------  ----
       604  Defl:N      330  45% 2025-02-14 22:54 e6455822  scan1.c
       562  Defl:N      291  48% 2025-02-15 01:53 2b9455cf  scan2.c
       509  Defl:N      277  46% 2025-02-15 01:56 1f557e2e  scan3.c
       709  Defl:N      339  52% 2025-02-15 18:11 d3d7ec6e  scan4.c
       698  Defl:N      338  52% 2025-02-15 18:17 84488150  scan5.c
        23  Stored       23   0% 2025-02-14 22:52 11044f8e  input1
        13  Stored       13   0% 2025-02-15 01:58 7e27c2c3  input3
         9  Stored        9   0% 2025-02-15 18:11 ae26204d  input4
  --------          -------  ---                            -------
     68736            12091  82%                            14 files
  scan.zip (END)
  #+end_example

- Upload the archive file =scan.zip= to Canvas!


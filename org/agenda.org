#+title: Agenda Notebook
#+author: Marcus Birkenkrahe
#+subtitle: CSC 100
#+SEQ_TODO: TODO NEXT IN_PROGRESS | DONE CANCELLED
#+startup: overview hideblocks indent entitiespretty
#+property: :header-args:C:      :main yes :includes <stdio.h> :results output :exports both
#+property: :header-args:python: :session *Python* :python python3 :results output :exports both
#+property: :header-args:R:      :session *R* :results graphics output file :exports both
#+property: :header-args:C++:    :main yes :includes <iostream> :results output :exports both
* Week 1: Orientation & Introduction
#+attr_html: :width 300px:
#+caption: Pufferfish woodcut
[[../img/pufferfish.png]]

- [X] Classroom situation (bring your laptop)
- [X] Orientation - introduction to the course
- [X] Introduction to the topic of the course

** DONE 30 students - 24 available PCs (at best)

- Bring your own laptop to class (best)
- Work on one PC with someone else (take turns)
- Work through the material using the recording

** DONE Review (Overview)

- When you hear the question, try to think of an answer.
- When you hear my answer(s), compare yours with mine.
- Sometimes my answers will contain additional information.
- Ask if anything is unclear this second time round.

1. What are the parts of our online programming environment?
   #+attr_html: :width 300px:
   [[../img/onecompiler2.png]]

2. Which online platforms are we going to use (know at least 2):
   #+begin_quote
   1) Canvas (learning management system)
   2) GitHub (lectures)
   3) Google Drive (whiteboard)
   4) Google Space (discussion)
   5) OneCompiler (programming)
   #+end_quote

3. What is "pseudocode"?
   #+begin_quote
   Instructions without syntax rules.
   #+end_quote
   Example:
   #+begin_example
   Start the program
   Count to 10
   Print number
   End the program
   #+end_example
   #+attr_html: :width 400px:

4. What does a typical "computing infrastructure" include?
   #+begin_quote
   1) An Operating system (like Windows or Linux) to do anything.
   2) Files to save source files (like =hello.c=).
   3) A Shell (or command-line) like =bash= to pass commands to the OS
   4) An editor to write, debug and save source code files.
   5) A network (like the Internet) for cloud applications.
   #+end_quote

5. What sits at the heart of the computer and what does it do?
   #+begin_quote
   At the heart of the computer sits the kernel program juggling
   thousands of system and user processes simultaneously while
   maintaining the illusion (for you) that it is only there for you.
   #+end_quote

6. How will you be evaluated in this class?
   #+begin_quote
   1) 50% for your programming assignments.
   2) 25% for your tests.
   3) 25% for your final exam (optional).
   #+end_quote

7. How can you get help for this class?
   #+begin_quote
   1) Ask me during class.
   2) During office hours (tinyurl.com/sp25-booking).
   3) Post your question to the Google class chat.
   4) Check one of the free, online textbooks.
   5) Use AI and don't forget to credit it.
   6) Attend all classes and/or work through the recordings.
   #+end_quote

* Week 2: C Language & First program 
#+attr_html: :width 300px: 
#+caption: 1970s Jesus Fish woodcut
[[../img/jesus_fish.png]]

- [X] Test preview / week review
- [X] C Programming language
- [X] Online programming platforms
- [X] Compiling with onecompiler.com
- [X] Uploading an in-class assignment
- [X] Assignments for next week

** DONE Review/Test preview (Way of the Program)

- The review questions are related to one or more questions on the
  weekly tests. In this case they come from the chapter you just read.

-----

1. What's the difference between interpreted and compiled languages?
   Examples for such languages?
   #+begin_comment
   /Interpreted/ languages (like Python) go straight from /source code/ to
   result, while /compiled/ languages (like C++) require an intermediate
   step, machine or /object/ code, before they can be run.
   #+end_comment

2. Who does what with what until a C program can be run?
   #+begin_comment
   1) The /user/ write /source code/ in an /editor/.
   2) The user saves the source code in a =.c= file.
   3) The /compiler/ translates the =.c= file into object code (=a.out=)
   4) The /shell/ executes the program.
   #+end_comment

3. What is the anatomy (dissection) of this command: =printf("Hello\n");=
   #+begin_comment
   1) =printf= is a function defined in the =<stdio.h>= header file.
   2) The function argument is a string ="..."=.
   3) The string consists of a /string literal/ (constant) =Hello= and a
      new line character, =\n=.
   4) The command is delimited by a =;= character.
   #+end_comment

4. Which programming errors do you know, when do they occur, and do
   you have an example?
   #+begin_comment
   1) /Syntax errors/ when the language rules are violated, for example
      a missing semicolon - program will not compile.
   2) /Logical errors/ when your algorithm does not work, for example
      the wrong formula - program will not crash.
   3) /Run-time errors/ when the program is executed - for example when
      you divide by zero - program crashes or behaves unexpectedly.
   4) /Semantic error/ when program compiles and runs but produces
      incorrect results due to incorrect meaning - for example, using
      a variable incorrectly.

   *Exercise: write little programs that produce each of these errors.*
   #+end_comment

5. Explain the structure of a typical C program.
   #+begin_src C
     // preprocessing: include header files for input/output
     #include <stdio.h>

     // main program: 
     int main(void)
     {             
       // action
       puts("Hello");
       // confirm success
       return 0;
     }
#+end_src

6. What is "parsing"?
   #+begin_comment
   Analyzing the structure of a program - e.g. finding =main= to mark
   the beginning of the program, or =printf= to begin printing.
   #+end_comment

7. Does C code have to be indented like this to work?
   #+begin_src C
     int main()
     {
       float pi = 3.14;
       printf("%.2f",pi);
     }
   #+end_src

8. Do you always have to have a =main= program?
   #+begin_comment
   Yes.
   #+end_comment

9. What's debugging?
   #+begin_center
   Finding and fixing programming mistakes. Helpful: using a debugging
   program like =gdb= ("GNU Debugger") that allows you to step through
   the code to print intermediate results.
   #+end_center

10. Which program translates human-readable source code into
    machine-executable object code?
    #+begin_center
    =gcc= - the GNU C Compiler.
    #+end_center

** DONE Assignments of the week

1. Complete a simple extension of the "hello world" program: Comment
   every line of the program and upload the URL to Canvas (Monday)
   
2. Read the second chapter (Variables and Types): 8 pages (you'll be
   tested on the content in test 2 at the end of the week - Friday).

3. There are two bonus assignments, which you can tackle at any point
   between now and May 9 (last day of class). One is simple, the other
   one is not so simple.

** NEXT Printing formatted values (in-class practice)

* Week 3: Printing formatted values & Variables

** TODO Review/Test preview: Introduction

1. Which language has more rules and more words - C or English?
   #+begin_quote
   C has hundreds of clear rules collected in a few hundred pages of
   documentation, and only 30 reserved words.

   English has thousands of constantly evolving rules of grammar,
   spelling, pronunciation, and style, and hundreds of thousands of
   words.
   #+end_quote

2. What is =\n= and what does it do?
   #+begin_quote
   =\n= is an "escape character" that escapes the =n= using the =\=.

   When the machine sees =\n= it prints a new line.
   #+end_quote

3. When you type =main= in the editor, what does the machine see?
   #+begin_example
   The machine sees a sequence of ASCII characters that correspond to
   a binary stream (bits):

   m: ASCII code = 109, binary = 01101101
   a: ASCII code = 97, binary = 01100001
   i: ASCII code = 105, binary = 01101001
   n: ASCII code = 110, binary = 01101110
   #+end_example

   #+begin_src C :results table
     printf("%c %c %c %c\n",'m','a','i','n');
     printf("%i %i %i %i\n",'m','a','i','n');
     printf("%b %b %b %b\n",'m','a','i','n');
   #+end_src

4. What's the main problem between the computer's brain-chip, memory,
   and data storage?
   #+begin_quote
   Speed. The brain-chip (CPU) is super-fast, the memory (RAM) is
   fast, and the data storage (hard disk) is painfully slow - but they
   must still all communicate with one another to do your bidding.
   #+end_quote

5. What does "tokenizing" mean?
   #+begin_quote
   "Tokenizing" means breaking down a sequence of text into smaller
   units called "tokens". In programming, these are the smallest
   elements of the source code that have meaning, such as keywords
   (e.g. =main=, =printf=), operators (=+=, ===), and punctuation =(;, {)=.
   #+end_quote


** TODO Practice: Printing values (with upload)

#+title: Agenda Notebook
#+author: Marcus Birkenkrahe
#+subtitle: CSC 100
#+SEQ_TODO: TODO NEXT IN_PROGRESS | DONE CANCELLED
#+startup: overview hideblocks indent entitiespretty
#+property: :header-args:C      :main yes :includes <stdio.h> :results output :exports both
#+property: :header-args:python :session *Python* :python python3 :results output :exports both
#+property: :header-args:R      :session *R* :results graphics output file :exports both
#+property: :header-args:C++    :main yes :includes <iostream> :results output :exports both
* Week 1: Orientation & Introduction
#+attr_html: :width 300px:
#+caption: Pufferfish woodcut
[[../img/pufferfish.png]]

- [X] Classroom situation (bring your laptop)
- [X] Orientation - introduction to the course
- [X] Introduction to the topic of the course

** 30 students - 24 available PCs (at best)

- Bring your own laptop to class (best)
- Work on one PC with someone else (take turns)
- Work through the material using the recording

** Review (Overview)

- When you hear the question, try to think of an answer.
- When you hear my answer(s), compare yours with mine.
- Sometimes my answers will contain additional information.
- Ask if anything is unclear this second time round.

1. What are the parts of our online programming environment?
   #+attr_html: :width 300px:
   [[../img/onecompiler2.png]]

2. Which online platforms are we going to use (know at least 2):
   #+begin_quote
   1) Canvas (learning management system)
   2) GitHub (lectures)
   3) Google Drive (whiteboard)
   4) Google Space (discussion)
   5) OneCompiler (programming)
   #+end_quote

3. What is "pseudocode"?
   #+begin_quote
   Instructions without syntax rules.
   #+end_quote
   Example:
   #+begin_example
   Start the program
   Count to 10
   Print number
   End the program
   #+end_example
   #+attr_html: :width 400px:

4. What does a typical "computing infrastructure" include?
   #+begin_quote
   1) An Operating system (like Windows or Linux) to do anything.
   2) Files to save source files (like =hello.c=).
   3) A Shell (or command-line) like =bash= to pass commands to the OS
   4) An editor to write, debug and save source code files.
   5) A network (like the Internet) for cloud applications.
   #+end_quote

5. What sits at the heart of the computer and what does it do?
   #+begin_quote
   At the heart of the computer sits the kernel program juggling
   thousands of system and user processes simultaneously while
   maintaining the illusion (for you) that it is only there for you.
   #+end_quote

6. How will you be evaluated in this class?
   #+begin_quote
   1) 50% for your programming assignments.
   2) 25% for your tests.
   3) 25% for your final exam (optional).
   #+end_quote

7. How can you get help for this class?
   #+begin_quote
   1) Ask me during class.
   2) During office hours (tinyurl.com/sp25-booking).
   3) Post your question to the Google class chat.
   4) Check one of the free, online textbooks.
   5) Use AI and don't forget to credit it.
   6) Attend all classes and/or work through the recordings.
   #+end_quote

* Week 2: C Language & First program
#+attr_html: :width 300px:
#+caption: 1970s Jesus Fish woodcut
[[../img/jesus_fish.png]]

- [X] Test preview / week review
- [X] C Programming language
- [X] Online programming platforms
- [X] Compiling with onecompiler.com
- [X] Uploading an in-class assignment
- [X] Assignments for next week

** Review/Test preview (Way of the Program)

- The review questions are related to one or more questions on the
  weekly tests. In this case they come from the chapter you just read.

-----

1. What's the difference between interpreted and compiled languages?
   Examples for such languages?
   #+begin_comment
   /Interpreted/ languages (like Python) go straight from /source code/ to
   result, while /compiled/ languages (like C++) require an intermediate
   step, machine or /object/ code, before they can be run.
   #+end_comment

2. Who does what with what until a C program can be run?
   #+begin_comment
   1) The /user/ write /source code/ in an /editor/.
   2) The user saves the source code in a =.c= file.
   3) The /compiler/ translates the =.c= file into object code (=a.out=)
   4) The /shell/ executes the program.
   #+end_comment

3. What is the anatomy (dissection) of this command: =printf("Hello\n");=
   #+begin_comment
   1) =printf= is a function defined in the =<stdio.h>= header file.
   2) The function argument is a string ="..."=.
   3) The string consists of a /string literal/ (constant) =Hello= and a
   new line character, =\n=.
   4) The command is delimited by a =;= character.
   #+end_comment

4. Which programming errors do you know, when do they occur, and do
   you have an example?
   #+begin_comment
   1) /Syntax errors/ when the language rules are violated, for example
   a missing semicolon - program will not compile.
   2) /Logical errors/ when your algorithm does not work, for example
   the wrong formula - program will not crash.
   3) /Run-time errors/ when the program is executed - for example when
   you divide by zero - program crashes or behaves unexpectedly.
   4) /Semantic error/ when program compiles and runs but produces
   incorrect results due to incorrect meaning - for example, using
   a variable incorrectly.

   *Exercise: write little programs that produce each of these errors.*
   #+end_comment

5. Explain the structure of a typical C program.
   #+begin_src C
     // preprocessing: include header files for input/output
     #include <stdio.h>

     // main program:
     int main(void)
     {
       // action
       puts("Hello");
       // confirm success
       return 0;
     }
   #+end_src

6. What is "parsing"?
   #+begin_comment
   Analyzing the structure of a program - e.g. finding =main= to mark
   the beginning of the program, or =printf= to begin printing.
   #+end_comment

7. Does C code have to be indented like this to work?
   #+begin_src C
     int main()
     {
       float pi = 3.14;
       printf("%.2f",pi);
     }
   #+end_src

8. Do you always have to have a =main= program?
   #+begin_comment
   Yes.
   #+end_comment

9. What's debugging?
   #+begin_center
   Finding and fixing programming mistakes. Helpful: using a debugging
   program like =gdb= ("GNU Debugger") that allows you to step through
   the code to print intermediate results.
   #+end_center

10. Which program translates human-readable source code into
    machine-executable object code?
    #+begin_center
    =gcc= - the GNU C Compiler.
    #+end_center

** Assignments of the week

1. Complete a simple extension of the "hello world" program: Comment
   every line of the program and upload the URL to Canvas (Monday)

2. Read the second chapter (Variables and Types): 8 pages (you'll be
   tested on the content in test 2 at the end of the week - Friday).

3. There are two bonus assignments, which you can tackle at any point
   between now and May 9 (last day of class). One is simple, the other
   one is not so simple.

* Week 3: Printing formatted values & Variables
#+attr_html: :width 600px:
[[../img/fishermen.jpg]]

- [X] Results: Test 1 & missing in action
- [X] P/review: Introduction
- [X] Practice: Printing formatted values in C
- [X] Lecture: Variables & Types

** Test 1 results and MIA

#+attr_html: :width 450px:
[[../img/t1_hist.png]]

- Four students missed the deadline!? (->  Max 50%)

- Good, almost excellent average! (89.44%)

- Code to draw the diagram shown (6 lines in R):
  #+begin_example R
  ## Variables
  t1 <- c(15,18,18,24,25,26,rep(27,3),rep(28,4),rep(29,5),rep(30,6))
  t1_normal <- t1/30 * 100
  t1_mean = mean(t1_normal)
  t1_mean_fmt <- as.numeric(format(t1_mean,digits=4))
  ## Plot
  hist(t1_normal,
       main="CSC 100: Test 1 (N=24)",
       xlab="Percentage",
       ylab="Number of participants",
       col="mistyrose")
  abline(v=mean(t1_mean),lwd=3,col="red")
  ## Legend
  legend("top",
         legend=paste("Average:",t1_mean_fmt,"%"),
         lty=1,lwd=3,
         col="red")
  #+end_example

** Review/Test preview: Introduction

1. What are the current assignments? How can you find out?
   #+attr_html: :width 700px:
   [[../img/calendar.png]]

   - The next assignment is test 2 (Friday, 31 January, 9 am).

   - The test is based on chapter 2 of the handout (Think C).

   - The next programming assignment is also due on Friday.

2. Which language has more rules and more words - C or English?
   #+begin_quote
   C has hundreds of clear rules collected in a few hundred pages of
   documentation, and only 30 reserved words.

   English has thousands of constantly evolving rules of grammar,
   spelling, pronunciation, and style, and hundreds of thousands of
   words.
   #+end_quote

3. What is =\n= called, and what does it do?
   #+begin_quote
   =\n= is an "escape character" that escapes the =n= using the =\=.

   When the machine sees =\n= it prints a new line.
   #+end_quote

4. When you type =main= in the editor, what does the machine see?
   #+begin_example
   The machine sees a sequence of ASCII characters that correspond to
   a binary stream (bits):

   m: ASCII code = 109, binary = 01101101
   a: ASCII code = 97, binary = 01100001
   i: ASCII code = 105, binary = 01101001
   n: ASCII code = 110, binary = 01101110
   #+end_example

   #+begin_src C :results table
     printf("%c %c %c %c\n",'m','a','i','n');
     printf("%i %i %i %i\n",'m','a','i','n');
     printf("%b %b %b %b\n",'m','a','i','n');
   #+end_src

5. What are the three main elements of computer architecture?
   #+attr_html: :width 500px:
   #+Caption: Central Processing Unit, Random Access Memory, Non Volatile Memory
   [[../img/computer_architecture.png]]

6. What's the main problem of computer architecture?
   #+Caption: The CPU is super-fast, the RAM is fast, and the NVM is very slow
   #+attr_html: :width 500px:
   [[../img/computer_architecture2.png]]

7. What does "tokenizing" mean?
   #+begin_quote
   "Tokenizing" means breaking down a sequence of text into smaller
   units called "tokens". In programming, these are the smallest
   elements of the source code that have meaning, such as keywords
   (e.g. =main=, =printf=), operators (=+=, ===), and punctuation =(;, {)=.
   #+end_quote

8. What's an IDE?
   #+begin_quote
   IDE = Integrated Development Environment - an application that
   integrates the editor, the compiler, and the shell so that you can
   write, compile and execute programs without leaving the app.

   Example: Emacs + Org-mode, or Onecompiler.com.
   #+end_quote

9. What is pseudocode?
   #+begin_quote
   Code in prose that encodes only the program logic and the program
   flow, but that does not comply with the syntax rules of any
   programming languages. A flowchart is pseudocode with graphics.
   #+end_quote

10. What is "Syntax highlighting"?
    #+begin_quote
    Syntax highlighting shows programming language syntax elements in
    different colors and/or fonts. Very helpful for writing/debugging
    code.
    #+end_quote

11. What should your source code include?
    #+begin_quote
    A program header with program name, input, output, author, date
    and license information.
    #+end_quote

12. What happens  if you  assign a  string value  like "Hello"  to an
    integer variable?
    #+begin_src C :tangle ../src/test.c
      int x;
      x = "Hello";
    #+end_src
    #+begin_quote
    - You can try this best in pythontutor (unless you have Emacs).
    - I will show you both pythontutor and the manual way.
    #+end_quote

** Review - printing with =%s=

1. What is ="%s %s"= ?
   #+begin_quote
   Two format specifiers waiting for two string values, for example
   ="Hello"= and ="World"=.
   #+end_quote

2. What's the difference between =%s%s\n= and =%s %s \n= ?
   #+begin_quote
   =%s%s\n= prints two strings without a space followed by a new line.

   =%s %s \n= prints two strings with a space between them followed by a
   space followed by a new line.
   #+end_quote

3. How many ways are there to print two words on two lines?

   #+begin_quote
   Many. You saw at least three.
   #+end_quote

   #+begin_src C :results output :includes <stdio.h>
     // print with `puts` (newline included)
     puts("Hello,");
     puts("world!\n");
     // Print two strings, one call, newline in the format part
     printf("%s\n%s", "Hello,", "world!");
     // Print one string per call
     printf("\n\n%s", "Hello");
     printf("\n%s", "world");
     // Print one string, newline in the value part
     printf("\n\n%s", "Hello\nworld!");
   #+end_src

   #+RESULTS:
   #+begin_example
   Hello,
   world!

   Hello,
   world!

   Hello
   world

   Hello
   world!
   #+end_example

4. You want to print five numbers. How many format specifiers do you
   need?
   #+begin_quote
   Five - one for each number.
   #+end_quote
   #+begin_src C
     // Print five integer values
     printf("%i %i %i %i %i\n", 0, 1, 2, 3, 4);
   #+end_src

   #+RESULTS:
   : 0 1 2 3 4

5. How many arguments does =printf= accept?
   #+begin_quote
   As many as it takes & as much memory as there is available.
   The general form is:
   printf( [format string], [arguments] );
   #+end_quote

** Printing formatted values (in-class practice with upload)

#+attr_html: :width 700px:
#+caption: Tokenized printf command
[[../img/whiteboard.png]]

** Test 1 deadline is this Friday (11:59 pm)!

- First results look promising!
- Take your merry time with the test!
- When asked about code, try it out!

** Assignment review: Hello world program with comments

- *Puzzled:* Many of you did not follow the instructions!? (AVG=8.76)

- *Note*: Instructions are everything, creativity means nothing.

- *Always ask* if you're unsure or confused. I'm here to help!

- *Review questions*:

  1) What does the program header contain?
     #+begin_quote
     Program name, purpose, input, output, author, pledge, date
     #+end_quote
  2) What does the function header contain?
     #+begin_quote
     Function name, return type, parameters (function arguments)
     #+end_quote
  3) What would the function header for this function look like?
     #+begin_example C
       void hello(char name) {
         printf("Hello, Mr. %c!", name);
       }
     #+end_example

     #+begin_src C :results output
       // hello: print a greeting and a character
       // returns: nothing (void)
       // parameters: character `name`
       void hello(char name) {
         printf("Hello, Mr. %c!", name);
       }
       int main(){
         hello('X');
         return 0;
       }
     #+end_src

     #+RESULTS:
     : Hello, Mr. X!
  4) What exactly happens in =printf("Hello, world.\n");=
     #+begin_example C
     // function `printf` is called
     // string "Hello, world." is printed
     // escape character `\n` moves cursor to next line
     // statement is closed with the delimiter `;`
     #+end_example
  5) Where should one put meta data like headers and comments?
     #+begin_quote
     - All meta data are placed ahead of what they're accompanying
     - Headers are placed immediately before functions
     - Comments =//= or =/* */= are placed immediately before or next to
       what they' commenting upon.
     #+end_quote

     #+begin_src C
       // hello: Print greeting
       // Returns: nothing (void)
       // Parameters: none (void)
       void hello(void) {
         puts("Hello.");
       }

       /*
        ,*   main program
        ,*/
       int main(void)
       {

         hello(); // call function

         return 0;
       }
     #+end_src

** Review (last lecture)

1. What's wrong with this code?
   #+begin_src C
     printf(%s\n, "Hello");
   #+end_src

   #+RESULTS:
   : Hello

   #+begin_quote
   The format string =%s\n= is not formatted as a string.

   Syntax error. Correct: =printf("%s\n", "Hello");=
   #+end_quote

2. What's wrong with this code?
   #+begin_src C :results output
     puts("I am %i years old", 22);
     puts("I am 22 years old");
     printf("I am %i years old", 22);
   #+end_src

   #+RESULTS:
   : I am %i years old
   : I am 22 years old
   : I am 22 years old

   #+begin_quote
   The =puts= function only prints a string + a new line.

   Logic error. Correct: =puts("I am 22 years old");=
   #+end_quote

3. What's wrong with this code?
   #+begin_src C :tangle main.c :includes <stdio.h>
     void main()
     {
       puts("");
     }
   #+end_src

   #+RESULTS:

   #+begin_quote
   The =main= function must =return= an =int=, not =void=.

   Run-time error. Correct: =int main() { puts(""); return 0;}=
   #+end_quote

4. What's wrong with this code?
   #+begin_src C
     printf("I have %c\n", "character.");
   #+end_src

   #+RESULTS:
   : I have 

   #+begin_quote
   A string argument is provided but a character argument is expected.

   Type mismatch error. Correct: =printf("I have %s\n", "character.");=
   #+end_quote

5. What's wrong with this code?
   #+begin_src C  :tangle main2.c :includes <stdio.h>
     printf("%i + %i = %i \n", 224);
   #+end_src

   #+RESULTS:
   : 224 + 1768136904 = -1361404480

   #+begin_quote
   One integer argument is provided but three are expected.

   Run-time error. Correct: =printf("%i + %i = %i \n", 2, 2, 4);=
   #+end_quote

* Week 4: Constants and keyboard input
#+attr_html: :width 400px:
#+caption: Graphic art by M.C. Escher
[[../img/escher_fish.jpg]]

- [X] *Programming assignments:* The purpose of "Sample output".
- [X] Review of the last lecture
- [X] Lecture & practice: Variables & Assignments (continued)
- [X] Lecture & practice: Constants & Keyboard input

** Review of the last lecture - Integer types

1. What's wrong with this code?
   #+begin_src C
     height = 10;
     int height;
   #+end_src
   #+begin_quote
   The variable =height= is used before it is declared.
   #+end_quote

2. What's wrong with this code?
   #+begin_src C
     int main(void) {
       int height;
       printf("The height is %d\n", height);
       return 0;
     }
   #+end_src

   #+RESULTS:
   : The height is 0

   #+begin_quote
   The variable =height= is uninitialized, so its value is undefined.
   #+end_quote

3. What's wrong with this code?
   #+begin_src C
     8 = height;
   #+end_src
   #+begin_quote
   Literals like =8= cannot be assigned values because they are
   constants.
   #+end_quote

4. What's wrong with this multi-variable declaration/definition?
   #+begin_src C
     int height = 3, width = 2, volume
   #+end_src
   #+begin_quote
   The statement is missing a semicolon (=;=).
   #+end_quote

5. What's wrong with this variable reassignment?
   #+begin_src C
     int main(void) {
       int foo;
       foo = 8;
       int foo = 18;
       return 0;
     }
   #+end_src
   #+begin_quote
   A variable cannot be redeclared within the same scope.
   #+end_quote

** Review of the in-class programming practice
#+attr_html: :width 400px:
#+caption: To the AI, nerds are always insanely attractive
[[../img/coding_couple.png]]

- 50% of you did not get the correct result. That's not a surprise!

- I've written to you with some recommendation:

  1. *Check* the instructions and try to write the code again in your
     own time.
  2. Even if it works, *compare* it with my sample solution.
  3. *Fix* the errors, try again until you have a working solution that
     you wrote yourself (= with your own hands).
  4. Now go back to your original (failed) program and make sure that
     you *understand* what you did wrong, and what every line means.
  5. You could go crazy and read the program again from the bottom
     line proceeding from right to left.

If after this you're still in need of tutoring: *come by my office*
(book at: [[https://tinyurl.com/sp25-booking][tinyurl.com/sp25-booking]])!  We'll sort you out in 30 min!

There's no shame in failing at coding at this stage but you need to
work at it a little at least to keep your head above water.

It'll do to check out the lectures and the code before/after class and
spend enough time on the programing assignments & perhaps try a bonus.

** Where can I get more practice problems?

1. Make up your own problems by minimally changing the programs that
   you wrote or that you saw in class.
2. Use AI: Paste the last program that you successfully wrote yourself
   into the interface, confess to being a complete noob and beginner &
   ask for 5 similar problems (without solutions).
3. Check out the "Challenges" tab in OneCompiler.com
4. Ask me.
5. More challenging: Go to leetcode.com and look for beginner problems
   in C.

** Review of the last lecture - Floating point types

1. What's wrong with this assignment? Will it compile? Will it run?
   #+begin_src C
     float profit = 2150.48;
   #+end_src

   #+RESULTS:

   #+begin_quote
   What's wrong?
   - Yes, it will compile and run.
   - The floating-point literal =2150.48= is a =double= by default.
   - While it can still be assigned to a =float=, this may cause
     implicit *type conversion* issues.
   - To explicitly indicate a =float=, the =f= suffix should be used.
   #+end_quote

2. What's wrong with this assignment? Will it compile? Will it run?
   #+begin_src C
     int iProfit = 2150.48;
   #+end_src
   #+begin_quote
   What's wrong?
   - Yes, it will compile and run.
   - A floating-point number is being assigned to an integer.
   - The compiler does not warn about this, but it will truncate the
     decimal portion.
   - =iProfit= will store =2150=, not =2150.48=, which may lead to
     unexpected results.
   #+end_quote

3. How can you show what's wrong with the last assignment?
   #+begin_src C
     int iProfit = 2150.48;  // wrong assignment
     printf("iProfit = %i or is it %f?\n", iProfit, (float)iProfit);
   #+end_src

   #+RESULTS:
   : iProfit = 2150 or is it 2150.000000?

   #+begin_quote
   - You have to print the memory content.
   - This shows that the fractional part of =iProfit= is lost forever.
   #+end_quote

4. What's wrong with this formatted output? What will it print?
   #+begin_src C
     float half = 0.5 * 10.0;
     printf("Half the number is: %i\n", half);
   #+end_src

   #+RESULTS:
   : Half the number is: 1074283832

   #+begin_quote
   What's wrong?
   - The format specifier =%i= is for integers, but =half= is a =float=.
   - Using =%i= for a floating-point value results in *undefined behavior*.
   - The correct format specifier should be =%f= instead.
   #+end_quote

5. What's wrong with this code?
   #+begin_src C
     int height = 8, length = 12, width = 10;
     printf("Volume = %i\n", height + length + width);
   #+end_src

   #+RESULTS:
   : Volume = 30

   #+begin_quote
   What's wrong?
   - The calculation inside =printf= is incorrect.
   - Instead of multiplying =height=, =length=, and =width=, the code mistakenly adds them.
   - The correct computation should be =height * length * width=.
   - Don't be so focused on the language that you forget math & logic!
   #+end_quote

6. What's wrong with this program? Will it compile? Will it run?
   #+begin_src C :results output
     #include <stdio.h>

     int main(void)
     {
       int num = 10;
       int doubleNum = 2 * num;
       float half = 0.5 * num;

       printf("The number is: %i\nDouble the number is: %i\nHalf the number is: %f",
              num, doubleNum, half);
     }
   #+end_src
   #+begin_quote
   What's wrong?
   - Yes it will compile (usually) and run.
   - The =main= function is missing a =return 0;= statement at the end.
   - While some compilers allow this omission, returning 0 explicitly
     indicates successful execution.
   - Best practice is to include =return 0;= at the end of =main=.
   #+end_quote

7. What's wrong with this code - why won't it compile?
   #+begin_src C :includes <stdio.h> :results output
     int num = 10;
     int doubleNum = 2 * num;
     float half = 0.5 * num;

     printf("The number is: %i\n\
     Double the number is: %i\nHalf the number is: %f",
            num,
            doubleNum,
            half);
   #+end_src

   #+RESULTS:
   : The number is: 10
   : Double the number is: 20
   : Half the number is: 5.000000

   #+begin_quote
   What's wrong?
   - The formatting string is not finished (error message: ="missing
     terminating character"=) - to extend a string over a new line, you
     need to terminate it with a ~\~.
   - The syntax highlighting already reveals that something's not
     right.
   #+end_quote

** Review of the last lecture

1. What's wrong with this code? Will it compile? Will it run?

   #+begin_src C
     #define PI 3.141593;
     printf("Pi is %f\n", PI);
   #+end_src

   #+begin_quote
   - It won't compile.
   - The semicolon (=;=) at the end of =#define PI 3.141593;= is incorrect.
   - Macro definitions are not *statements*; they are simple *text
     substitutions*. The semicolon will be included in every
     replacement, causing a *syntax error* when used in expressions.
   #+end_quote

2. What's wrong with this code? Will it compile? Will it run?

   #+begin_src C :results output
     #define VALUE 1.0
     printf("Constant value is %.1f\n", VALUE);
     #define VALUE 2.0
     printf("Constant value is %.1f\n", VALUE);
   #+end_src

   #+RESULTS:
   : Constant value is 1.0
   : Constant value is 2.0

   #+begin_quote
   - The code compiles and runs.
   - The constant =VALUE= is redefined using =#define= without an =#undef=
     directive.
   - While this is allowed in C, it generates a compiler warning.
   - Redefining a macro without =#undef= can lead to unexpected
     behavior. A proper approach is:
   #+end_quote
   #+begin_src C
     #define VALUE
     // ...
     #undef VALUE
     #define VALUE 2.0
   #+end_src

3. What's wrong with this code? Will it compile? Will it run?

   #+begin_src C
     #include <stdio.h>
     printf("Pi is %f\n", M_PI); // M_PI is the mathematical constant \pi
   #+end_src

   #+RESULTS:

   #+begin_quote
   - Program will not compile.
   - The program is missing the =#include <math.h>= header, which
     defines =M_PI=.
   - Without this, the compiler does not recognize =M_PI=, leading to an
     "undeclared identifier" error.
   #+end_quote

4. What's wrong with this code? Will it compile? Will it run?

   #+begin_src C
     #include <stdio.h>
     #define apple_pie M_PI

     int main(void) {
       printf("Pi is %f\n", apple_pie);
       return 0;
     }
   #+end_src

   #+begin_quote
   - It will not compile.
   - The program is missing =#include <math.h>=, which defines
     =M_PI=. Since =apple_pie= is defined as =M_PI=, but =M_PI= is not
     recognized, the program will fail to compile.
   #+end_quote

5. What's wrong with this code? Will it compile? Will it run?
   #+begin_src C :main no :includes
     #include <stdio.h>
     #include <math.h>
     #define e M_E
     printf("%.16f\n", e);
     int main() {

        return 0;
     }
   #+end_src

   #+RESULTS:

   #+begin_quote
   - It will not compile.
   - The =printf= statement is outside a function. In C, all executable
     statements must be inside a function, typically =main()=.
   #+end_quote

** New programming assignment "Your height in light-years"

- Define physics constants (speed of light, year in seconds).

- Convert height (in meters) into light-years (the distance that
  photons travel in the course of one year).

- You can use the formula: $$ 1 [m] \equiv \frac{1}{c [m/s] \times y [s]} $$
  where $c$ is the speed of light, and $y$ is the year in seconds.

- For example, the Eifeltower in Paris is 330 m high. In light-years:
  #+begin_src C
    printf("%.2E", 330/(299792458.0 * 31536000.0)); // using the %e format
  #+end_src

  #+RESULTS:
  : 3.49e-14

- To avoid having to print 1/3.49049200000000, the =printf= statement
  uses scientific or E-notation with the =%e= format specifier.

- *Remember*: You must reproduce the sample output exactly, you must
  respect the constraints, and you must adequatly comment your code.

- The *bonus* assignment is a reloaded version, which will include
  accepting keyboard input to compute the height in light-years.


* Week 5: Naming, =printf=, and =scanf=
#+attr_html: :width 600px: 
[[../img/japanese.jpg]]

- [X] Test 3 still available (50%) - excellent results!
  #+attr_html: :width 600px: 
  [[../img/test3.png]]

- [X] Review: Print constant values - read keyboard input

- [X] *Lecture/Practice:* Naming conventions and rules

- [X] *Lecture/Practice*: Printing to =stdout= with =printf=

- [ ] *Lecture/Practice:* Reading from =stdin= with =scanf=

** DONE Review: Print constant values - read keyboard input

*Sample files:*

- Printing constants: [[https://onecompiler.com/c/437ukkdbb][onecompiler.com/c/437ukkdbb]]

- Reading keyboard input: [[https://onecompiler.com/c/437up425x][onecompiler.com/c/437up425x]]

*Questions:*

1. How can you print =6.5%=?
   #+begin_src C
   printf("6.5%%\n"); // escape `%` with `%`
   #+end_src

   #+RESULTS:
   : 6.5%

2. How can you print =2.7182818285= as =2.71=?
   #+begin_src C
     printf("%.2f\n",2.7182818285); // retain two digits only
   #+end_src

   #+RESULTS:
   : 2.72

3. How can you define a permanent constant?
   #+begin_src C
     const int perm = 1;  // this is what you saw in class
     int const perm2 = 2; // you can swap `const` and `int`

     printf("%i %i\n",perm,perm2);
   #+end_src

   #+RESULTS:
   : 1 2

4. What is =stdin=? How can you get it in C++?
   #+begin_quote
   =stdin= stands for "standard input" = incoming data, for example from
   a keyboard, or a touchscreen, or a camera.
   
   You can fetch standard input with the =scanf= function.
   #+end_quote

5. How would you fetch =100= from the keyboard and store it in =x=?
   #+begin_src C :cmdline < 100
     int x;   // first declare an integer variable
     scanf("%i",&x);  // get the value from the keyboard
     printf("%i\n",x); // print what you got
   #+end_src

   #+RESULTS:
   : 100


** TODO Practice with =printf=

- Open [[https://tinyurl.com/6-printf-practices][tinyurl.com/6-printf-practices]] in your browser.

- Using OneCompiler.com (or Emacs) work through the exercises.

- When you're done, upload your file on Canvas.

** TODO Practice with =scanf=

- Open [[https://tinyurl.com/scanf-practice][tinyurl.com/scanf-practice]] in your browser.

- Using OneCompiler.com (or Emacs) work through the exercises.

- When you're done, upload your file on Canvas.

* Week 6:
#+attr_html: :width 400px: 
#+caption: Francisco de Goya, Still Life with Golden Bream (1808)
[[../img/goya.jpg]]

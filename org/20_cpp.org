#+TITLE:C to C++ Transition
#+AUTHOR:Marcus Birkenkrahe (pledged)
#+SUBTITLE:CSC 100 Intro to Programming in C++ (Spring 2025)
#+STARTUP: overview hideblocks indent
#+OPTIONS: toc:1 num:1 ^:nil
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output :exports both :noweb yes
#+PROPERTY: header-args:C++ :std:main yes :includes <iostream> :results output :exports both :noweb yes
* Objectives

*Object-Oriented Programming (OOP) with C++:*

- [ ] Transform C ~struct~ into C++ ~class~
- [ ] Understand that data can be ~private~ or ~public~
- [ ] Access ~private~ =Player= data with =getHealth=
- [ ] Create a =Player= class with =takeDamage= and =heal=
- [ ] Define ~class~ constructors and destructors
- [ ] Apply the ~this~ pointer inside ~class~ methods
- [ ] Create ~static~ members to track state across instances
- [ ] Understand the object lifecycle

* Codealong with C++ in OneCompiler

- OneCompiler is an IDE for multiple languages, and C/C++ are
  distinguished.

- Open ~onecompiler.com/cpp~ - this will bring up the template program
  for C++ rather than C - let's go through it line by line:

  #+begin_src C++ :main no :includes :results output
    #include <iostream> // Input/output control
    using namespace std; // Using stuff from the C++ standard library

    int main(void) // the usual main program
    {
      cout << "Hello, world!"; // direct the output to stdout
      return 0; // the usual END of main - 0 if successful
    }
  #+end_src

  #+RESULTS:
  : Hello, world!

- It's just as (deceptively) simple to enter user input in
  C++. Replace the ~cout~ line with this and enter some input in the
  ~STDIN~ field.
  #+attr_html: :width 600px :float nil:
  [[../img/cpp_ide.png]]

- Notice that the program is called =Main.cpp= - .cpp is the default
  ending for C++ programs (compared to .c for C programs):

- You could download =Main.cpp=, compile and run it on the command-line
  (e.g. on the Google Cloud shell, =ide.cloud.google.com=):
  #+attr_html: :width 400px :float nil:
  [[../img/greeting.png]]
- The Code:
  #+begin_src C++ :cmdline < input :includes <iostream> :namespaces std :results output
    string name; // declare string variable
    cout << "What's your name? "; // ask for user input
    cin >> name; // get user input from stdin
    cout << name << endl << endl; // print user input
    cout << "Hello, " + name << "!"; // print greeting
  #+end_src

  #+RESULTS:
  : What's your name? Marcus
  :
  : Hello, Marcus!

- *Explanations* (for lonely winter evenings):
  + ~iostream~ is the C++ header file for input and output
  + ~std~ is a ~namespace~, a protected area that contains ~cout~ for
    output, ~cin~ for input, ~string~ and ~vector~ for string and vector
    identifiers, ~endl~ for new line, etc.
  + This is because there is a limited number of words and terms
    available, and different softwares can now use the same name but
    with a different ~namespace~ prefix.
  + The full version of ~cout~ is therefore ~std::cout~ etc.

- Input:
  #+begin_src bash :results output :exports both
    echo "Marcus" > input
    cat input
  #+end_src

  #+RESULTS:
  : Marcus

* From ~struct~ in C to ~class~ in C++ - =Player=

- Our goal is to understand how to translate a C ~struct~ into a C++
  ~class~ and why you'd want to do that.

- Here is a typical C-style ~struct~:
  #+name: Declare Player struct
  #+begin_src C
    struct Player {
      int x; // player's x position
      int y; // player's y position
      int health; // player's health points (> 0)
    };
  #+end_src

- There's a problem here: In C, all members of =Player= are ~public~ by
  default: There's no way to restrict access if someone wants to mess
  with your =Player=.

- Example: Negative =Player.health= points are meaningless but the
  compiler allows it - and the position =Player.x= can also be
  corrupted:

  #+begin_src C
    <<Declare Player struct>>

    struct Player John; // John is a Player now
    John.health = -1000; // Invalid health!
    John.x = 9999; // Out in the cold!

    printf("Player's health (%d) and position (%d) are worrying.\n",
           John.health, John.x);
  #+end_src

  #+RESULTS:
  : Player's health (-1000) and position (9999) are worrying.

* Data hiding (aka encapsulation) in C++ - =Player.health=

- In C++, ~Player~ data can be hidden and controlled:

  #+name: Declare Player class
  #+begin_src C++ :results none
    class Player {

    private:      // private data
      int x, y, health;
    };
  #+end_src

- Let's try to mess with a player now:
  #+begin_src C++ :noweb yes :results none
    <<Declare Player class>>

    class Player Jane;
    Jane.health = -1000;
    Jane.x = 9999;
  #+end_src

- In C++, if you don't specify data as ~public~, they're ~private~.

* How to access ~private~ data - =getHealth()=

- Data that are ~private~ are accessed only indirectly through *methods*.

- You've already met one one those methods: =move_point= for the =Point=
  structure:
  #+begin_example C
    struct Point p;  // create a Point p
    move_point(&p,dx,dy); // move p by dx in x-, and by dy in y-direction
  #+end_example

- Methods are functions that belong to classes and act on their
  data. In C++, a method (or member function)
  1) is declared inside a ~class~
  2) can access the class's ~private~ data
  3) is called using an object of the ~class~

- Here's =Player= again but with a method that allows us to check the
  =Player='s =health=:
  #+name: Create Player with a public getHealth function
  #+begin_src C++
    class Player {
    private:
      int health = 100;  // Player's private health
    public:
      int getHealth() {
        return health;  // make Player's health public
      }
    };
  #+end_src

  #+RESULTS: Create Player with a public getHealth function

- Let's test it:
  #+begin_src C++ :noweb yes :namespaces std :includes <iostream>
    <<Create Player with a public getHealth function>>
     // Create a Player named Jane
    class Player Jane;
    // Get Jane's [private] health data
    cout << "Player health = " << Jane.getHealth() << endl;
  #+end_src

  #+RESULTS:
  : Player health = 100

- C++ enforces data type and access control much more strongly than C.

* How to alter ~private~ data - =takeDamage=

- Now we know how to get to the ~private~ data - to alter them, we need
  a new method. In the example, we're adding the =takeDamage= method,
  and we're retaining the =getHealth= method (we need it to check).

- Example: Create a =Player= that can take damage
  #+name: Create Player that can take damage
  #+begin_src C++
    class Player { // a Player class

    private: // private data
      int health = 100;  // Player's health is hidden

    public:  // public member function

      int getHealth() {
        return health;  // make Player's health public
      }

      void takeDamage(int amount) {
        health -= amount; // reduce Player's health by amount
      }
    };
  #+end_src

- In the ~main~ program, we're adding a =Player= who can take damage:
  #+begin_src C++ :noweb yes :includes <iostream> :namespaces std :results output
    <<Create Player that can take damage>>

    class Player John; // John's a Player

    // What's his health like?
    cout << "Before the fight: Player's health = " << John.getHealth() << endl;

    // In a fight, John takes damage
    John.takeDamage(50);

    // What's his health like?
    cout << "After the fight: Player's health = " << John.getHealth() << endl;
  #+end_src

  #+RESULTS:
  : Before the fight: Player's health = 100
  : After the fight: Player's health = 50

* Challenge: Heal the =Player= with =heal=

- Use the code developed so far, and add a =heal= method that increases
  a =Player='s =health=:
  1) Create =Player= class with ~private~ member =health=, and ~public~
     methods =getHealth=, =takeDamage=, and =heal=.
  2) Create ~main~ program, create a =Player=, print his =health=, let him
     =takeDamage= (50), print his =health=, =heal= him (80), print =health=.

- Sample output:
  #+begin_example
    Player's health = 100
    Player's health after battle = 50
    Player's health after healing = 130
  #+end_example

- Here is the starter code:
  #+begin_src C++ :main no :includes :results output
    // include input / output
    // use standard names

    /* class definition */
    // Create a Player class


    // private data

    // Player's health (initially 100)

    // public data

    // Return Player's health
    // int getHealth(void)

    // Reduce Player's health by amount
    // void takeDamage(int)

    // Heal Player by amount
    // void heal(int)

    // END CLASS

    /* main program */

    // BEGIN MAIN
    // Create a Player [name]

    // PRINT Player's health + new line

    // Player takes damage (50)

    // PRINT Player's health after battle + new line

    // Player heals (80)

    // PRINT Player's health after healing + new line

    // END MAIN
  #+end_src

- Solution:
  #+begin_src C++ :main no :includes :results output :tangle player.cpp
    #include <iostream> // include input / output
    using namespace std; // use standard names

    // Create a Player class
    class Player {

    private: // private data
      // Player's health (initially 100)
      int health = 100;

    public: // public data

      // Return Player's health (int)
      int getHealth() {
        return health;
      }

      // Reduce Player's health by amount (int)
      void takeDamage(int amount) {
        health -= amount;
      }
      // Heal Player by amount (int)
      void heal(int amount) {
        health += amount;
      }
    };

    /* main program */
    int main(void)
    {
      // Create a Player
      Player John;
      // PRINT Player's health
      cout << "Player's health = " << John.getHealth() << endl;
      // Player takes damage (50)
      John.takeDamage(50);
      // PRINT Player's health after battle
      cout << "Player's health after battle = " << John.getHealth() << endl;
      // Player heals (80)
      John.heal(80);
      // PRINT Player's health after healing
      cout << "Player's health after healing = " << John.getHealth();

      return 0;
    }
  #+end_src

  #+RESULTS:
  : Player's health = 100
  : Player's health after battle = 50
  : Player's health after healing = 130

* Bonus challenge: Cap =Player= =health= at 100

- Modify the previous program to cap the =health= at 100. That is, ~if~
  =health= is above 100, reset it to 100.

- Using the same values as before (take 50 damage, heal 80), the
  sample output is now:
  #+begin_example
    Player's health = 100
    Player's health after battle = 50
    Player's health after healing = 100
  #+end_example

- Starter code: [[https://onecompiler.com/cpp/43h3n5mgm][onecompiler.com/cpp/43h3n5mgm]]

- Solution: [[https://onecompiler.com/cpp/43h2m4cf3][onecompiler.com/cpp/43h2m4cf3]]
  #+begin_src C++ :main no :includes :results output :tangle player2.cpp
    #include <iostream> // include input/output
    using namespace std; // use standard names

    // Create a Player class
    class Player {
    private: // private data
      // Player's health (initially 100)
      int health = 100;

    public: // public data

      // Return Player's health (int)
      int getHealth() { return health; }
      // Reduce Player's health by amount (int)
      void takeDamage(int amount) { health -= amount; }
      // Heal Player by amount (int)
      void heal(int amount) {
        health += amount;
        if (health > 100) health = 100;
      }
    };

    /* main program */
    int main(void) {
      // Create a Player
      Player John;
      // PRINT Player's health
      cout << "Player's health = " << John.getHealth() << endl;
      // Player takes damage (50)
      John.takeDamage(50);
      // PRINT Player's health after battle
      cout << "Player's health after battle = " << John.getHealth() << endl;
      // Player heals (80)
      John.heal(80);
      // PRINT Player's health after healing
      cout << "Player's health after healing = " << John.getHealth();

      return 0; }
  #+end_src

  #+RESULTS:
  : Player's health = 100
  : Player's health after battle = 50
  : Player's health after healing = 100

* Initializing before and cleaning up after ~class~

- A C ~struct~ requires manual setup and teardown.

- A C++ ~class~ automates initialization and cleanup with special
  methods called *constructor* and *destructor*.

- Doing this makes code safer, more readable, and more reusable (these
  are the three big reasons for OOP to scale[fn:1] code development).

- Example: A *constructor* =Player(int)= in the =Player= ~class~ will set
  =health= when the player is created, or "goes into scope".

- Example: A *destructor* =Player()= in the =Player= ~class~ will delete all
  memory allocated to a =Player= when finishes, or "goes out of scope".

* Constructor: Set =Player= =health= when a player is created

- This is the =Player= class so far (without the =health= cap):
  #+begin_src C++ :main yes :results none
    class Player {
    private:
      int health = 100;
    public:
      int getHealth() { return health; };
      void takeDamage(int amount) { health -= amount; }
      void heal(int amount) { health += amount; }
    };
  #+end_src

- Modify this class:
  1) Add a constructor to allow =health= to be set when the =Player= is
     created.
  2) Test the constructor in a ~main~ program by creating a =Player= named
     =John= with initial =health= of 150.
  3) Display =John='s =health=.

- Starter code: [[https://onecompiler.com/cpp/43gpntxa2][onecompiler.com/cpp/43gpntxa2]]
  #+begin_src C++ :main yes :includes :results output
    // Include Input/Output functions
    // Use standard namespace

    // Create Player class

    // BEGIN class
    // private data:
    // Player's health
    // public data
    // Initialize Player with health h
    // Return Player's health
    // END class

    // main program
    // BEGIN main
    // Create a Player named John with a health of 150

    // Display John's health

    // END main
  #+end_src

- Solution:
  #+begin_src C++ :main yes :includes :results output
    #include <iostream>
    using namespace std;

    class Player {
    private:
      int health; // Player's health is private
    public:
      Player(int h) { // constructor
        health = h;
      }
      int getHealth() { return health; }
    };

    int main(void)
    {
      // create a Player named John with a health of 150
      Player John(150);
      // display John's health
      cout << "John's health is " << John.getHealth();
      return 0;
    }
  #+end_src

  #+RESULTS:
  : John's health is 150

* Initializer Lists Syntax

- A better style for initializing member variables in constructors is
  using a list:
  #+begin_src C++ :main no :results output :includes <iostream> :namespaces std
    class Player {
    private:
      int health;
      int level;
    public:
      // Default constructor
      Player(int h) : health(h) { // initializer list
        cout << "Player created with health: " << health << endl;
      }
    };

    int main() {
      Player John(100);
    }
  #+end_src

  #+RESULTS:
  : Player created with health: 100

- In the example, the constructor informs us when the =Player= was
  created.

- Any number of members can be initialized, e.g. this list would
  create a =Player= with default =health=100=, =level=1=, and =build=3=:
  #+begin_example C
  Player() : health(100), level(1), build(3) { }
  #+end_example

- Why is this better?
  1) Member variables are initialized directly at construction time
     (rather than default-constructed first and then assigned a value)
  2) You must use initializer lists for ~const~ members or references
     because they cannot be assigned to after construction:
     #+begin_src C++ :results none
       class Person {
         const int ssn; // Person's SSN does not change
       public:
         Person(int i) : ssn(i) { } // must use initializer list
       };
     #+end_src

* Destructor: Clean up =Player= at the end of the game

- The destructor method runs when the =Player= object goes "out of
  scope", when the =Player= has died and the =Player= data are no longer
  needed.

- This is useful for keeping a log, or for memory cleanup.

- Here is the =Player= class with a default destructor method
  =~Player=. This destructor is called automatically.

  #+name: Player class
  #+begin_src C++ :main yes :noweb yes :namespaces std :includes <iostream> :results none
    class Player {
    private:
      int health;
      int level;
    public:
      // Default constructor
      Player(int h) : health(h) {
        cout << "Player created with health: " << health << endl;
      }
      // Default destructor
      ~Player() {
        cout << "Player destroyed. " << endl;
      }
    };
  #+end_src

- Let's test it:
  #+begin_src C++ :noweb yes :main yes :namespaces std :includes <iostream> :results output
    <<Player class>>

    int main() {
      Player John(100);
     }
  #+end_src

  #+RESULTS:
  : Player created with health: 100
  : Player destroyed.

- This looks as if the =Player= =John= was created and instantly
  destroyed. But that's not true: =John= lived for the duration of the
  ~main~ program.

- This is more obvious if we give =John= a fighting chance:
  #+begin_src C++ :tangle fight.cpp :noweb yes :main yes :namespaces std :includes <iostream> <unistd.h> :results output
    <<Player class>>

    int main() {
      Player John(100);
      cout << "Player is fighting monsters...\n" << endl;
      sleep(2);
      cout << "Player gains 50 XP...\n" << endl;
      sleep(2);
      cout << "Main function is about to end.\n" << endl;
     }
  #+end_src

- I'm going to run this program (=fight.cpp=) on the command-line so
  that you can see what's going on:
  #+begin_example
    g++ fight.cpp -o fight
    ./fight
  #+end_example

- Output:
  #+begin_example
   $ ./fight
   Player created with health: 100
   Player is fighting monsters...

   Player gains 50 XP...

   Main function is about to end.

   Player destroyed.
   $
  #+end_example

- Unlike in "garbage-collecting" programming languages like Java or
  Python, in C++ you know exactly when objects are destroyed - that's
  a feature!

* Challenge: Create two =Player= characters

- Create two =Player= characters, name them =Alice= and =Bob=, start them
  off with =health= 100 and 200, respectively. Let them =takeDamage= (50),
  show the resulting =health=, and finish.

- Tip: You need =Player::health=, and the ~class~ methods
  1) =Player(int)= to create a =Player=
  2) =~Player()= to destroy a =Player=
  3) =getHealth()= to ~return~ =health=
  4) =takeDamage(int)= to reduce =health= after a fight.

- Sample output:
  #+begin_example
  Player created, health = 100
  Player created, health = 200
  Game in progress...

  Game is about to end...

  Alice's health: 50
  Bob's health: 150
  Game over.

  Player destroyed
  Player destroyed
  #+end_example

- Starter code: [[https://onecompiler.com/cpp/43h2mrae6][onecompiler.com/cpp/43h2mrae6]]

  #+begin_src C++ :main no :includes :results output
    #include <iostream>
    using namespace std;
    class Player {
    private:
      int health;
    public:
      Player(int h) : health(h) {
        cout << "Player created, health = " << health << endl;}
      ~Player() { cout << "Player destroyed" << endl; }
      int getHealth() { return health;}
      void takeDamage(int amount) { health -= amount; }
    };

    int main(void)
    {
      // Create two players, Alice and Bob

      // PRINT "Game in progress..."

      // Alice takes damage

      // Bob takes damage

      // PRINT "Game is about to end..."

      // PRINT Alice's health

      // PRINT Bob's health

      // PRINT "Game over."

      return 0;
    }
  #+end_src

- Solution:
  #+begin_src C++ :main no :includes :results output
    #include <iostream>
    using namespace std;
    class Player {
    private:
      int health;
    public:
      Player(int h) : health(h) {
        cout << "Player created, health = " << health << endl;}
      ~Player() { cout << "Player destroyed" << endl; }
      int getHealth() { return health;}
      void takeDamage(int amount) { health -= amount; }
    };
    int main(void)
    {
      Player Alice(100), Bob(200);
      cout << "Game in progress...\n" << endl;
      Alice.takeDamage(50);
      Bob.takeDamage(50);
      cout << "Game is about to end...\n" << endl;
      cout << "Alice's health: " << Alice.getHealth() << endl;
      cout << "Bob's health: " << Bob.getHealth() << endl;
      cout << "Game over.\n" << endl;
      return 0;
    }
  #+end_src

  #+RESULTS:
  #+begin_example
  Player created, health = 100
  Player created, health = 200
  Game in progress...

  Game is about to end...

  Alice's health: 50
  Bob's health: 150
  Game over.

  Player destroyed
  Player destroyed
  #+end_example

* The ~this~ Pointer

- When you define a method like =takeDamage= inside a ~class~ like =Player=,
  you are writing instructions for what every object of that class
  (=John=, =Alice=, =Bob=) should be able to do.

- But how does the method know which object it is working on?

- The special keyword ~this~ is a pointer to the current object, the one
  calling the method, e.g. =Alice= in =Alice.takeDamage(50)=.

- Think of ~this~ as the way an object says "me". When a =Player= says
  =this->health=, it means "my health."

- Example: Here, the ~class~ =Player= has a member variable =health= (full
  name =Player::health=), and the constructor has a parameter also named
  =health=. ~this~ is used to keep them apart:

  #+begin_src C++ :main no :includes :results output
    class Player {
    private:
      int health;
    public:
      Player(int health) {
        this->health = health; // LHS: ptr to member, RHS: parameter
      }
      int getHealth() { return this->health; }
    };

    #include <iostream>
    using namespace std;
    int main() {
      Player Jack(100);
      cout << "Player's health: " << Jack.getHealth() << endl;
    }
  #+end_src

  #+RESULTS:
  : Player's health: 100

- Why is this useful?
  1. To resolve naming conflicts when constructor parameters or method
     arguments have the same name.
     #+begin_example C++
     Player(int health) {
       this->health = health;  // assign parameter to member
     }
     #+end_example
  2. To return the object itself when chaining methods together:
     #+begin_example C++
     Player& setHealth(int h) {
       this->health = h;
       return *this;
       // allows chaining like: player.setHealth(100).takeDamage(10);
     }
     #+end_example
  3. To reinforce object identity.

* Practice: ~this~

- Write a constructor for the =Car= class that creates a =Car= with the
  following features: =cyl= (number of cylinders), and =speed= (maximum
  speed).

- When the =Car= is created in ~main~, you should see the message:
  #+begin_example
    Car created with ... cylinders and ... mph max speed.
  #+end_example

- When the program is done, it will print: ~Car destroyed.~

- Constraints:
  1) Use ~this~ to print =fuel= and =speed= values.
  2) Create a 4-cylinder =kia= =Car= with 140 mph max =speed=.
  3) Create a 6-cylinder =ford= =Car= with 200 mph max =speed=.

- The Starter code is here: https://onecompiler.com/cpp/43h48uajv

  #+begin_src C++ :main no :includes :results output
    #include <iostream>
    using namespace std;

    class Car {
    private:
      const int cyl;
      const int speed;
    public:
      // Construct a Car

      // PRINT Car's cylinder and max speed values

      // Destructor
      ~Car() { cout << "\nCar destroyed." << endl; }
    }; // END Car

    int main(void) { // main program
      // Create a Kia with 4 cyl, 140 mph max speed

      // Create a Ford with 6 cyl, 200 mph max speed

      return 0;
    }
  #+end_src

- Solution:
  #+begin_src C++ :main no :includes :results output
    #include <iostream>
    using namespace std;

    class Car {
    private:
      const int cyl;
      const int speed;
    public:
      // Construct a Car
      Car(int cyl, int speed) : cyl(cyl), speed(speed) {
        // PRINT Car's cylinder and max speed values
        cout << "Car created with " << this->cyl
             << " and "             << this-> speed
             << " mph max speed." << endl;
      }
      // Destructor
      ~Car() { cout << "Car destroyed." << endl; }
    }; // END Car

    int main() { // main program
      // Create a Kia with 4 cyl, 140 mph max speed
      Car kia(4,140);
      // Create a Ford with 6 cyl, 200 mph max speed
      Car ford(6,200);
      return 0;
    }
  #+end_src

  #+RESULTS:
  : Car created with 4 and 140 mph max speed.
  : Car created with 6 and 200 mph max speed.
  : Car destroyed.
  : Car destroyed.

* ~static~ members are shared across all instances

- An *instance* is another word for an object of a class. So =Player
  Jack(100);= creates a =Player= named =Jack= - Jack is an instance.

- Some methods are defined as ~static~ because they don't operate on
  ~class~ members. For example a method =Player::getCount= that counts the
  number of =Player= objects in the game.

- Example code:
  #+name: Player class with counter
  #+begin_src C++ :results none
    class Player {
    private:
      int health;
      static int count; // static member variable
    public:
      // constructor
      Player(int health) {
        this->health = health;
        count++; }
      // destructor with counter variable
      ~Player() { count--; }
      // get Player count
      static int getCount() { return count; }
    };
  #+end_src

  - Test this:
    #+begin_src C++ :main no :includes :results output :noweb yes
      #include <iostream>
      using namespace std;

      <<Player class with counter>>
      int Player::count = 0; // initialize Player::count

      int main() {
        { // BEGIN scope
          Player Jack(100); // create Player
          cout << "Player count: " << Player::getCount() << endl;

          Player Alice(100); // create Player
          cout << "Player count: " << Player::getCount() << endl;
        } // END scope
        cout << "Player count: " << Player::getCount() << endl;
        return 0;
      }
    #+end_src

    #+RESULTS:
    : Player count: 1
    : Player count: 2
    : Player count: 0

  - Remember that the default destructor is only invoked when the
    objects to "out of scope". This happens at the end of ~main~ but
    then we can no longer use =Player::getCount=. Therefore I added a
    scope by nesting the =Player= code inside ={ }= which is "scope".

  - Note that ~this~ does not operate on ~static~ methods of a ~class~
    because these methods do not belong to any object - they can be
    called without creating an object.

* Challenge: =Enemy= ~class~

- Create an =Enemy= class with:
  1. A constructor
  2. A destructor
  3. Private =strength= member
  4. =attack()= method returning damage (e.g. =strength / 2=)
  5. Static member tracking total enemies

-  Sample Output
  #+begin_example
  Enemy created with strength 80
  Enemy created with strength 100
  Enemies active: 2
  Attack damage: 40
  Enemy destroyed
  Enemy destroyed
  Enemies active: 0
  #+end_example

- Starter code: [[https://onecompiler.com/cpp/43h3pgda6][onecompiler.com/cpp/43h3pgda6]]
  #+begin_src C++ :main no :results output
    #include <iostream>
    using namespace std;

    // Declare Enemy class

    // private data: strength, active enemies

    // public data: constructor, destructor, attack, getActive

    // SET active enemies to zero

    // main program
    // BEGIN main
    // BEGIN battle
    // Create two enemies
    // PRINT number of active enemies (2)
    // One enemy attacks
    // END battle
    // PRINT number of active enemies (0)
    // END main
  #+end_src

- Solution:
  #+begin_src C++ :main no :results output
    #include <iostream>
    using namespace std;

    class Enemy {
    private:
      int strength;
      static int active;
    public:
      Enemy(int strength) { // constructor
        this->strength=strength;
        cout << "Enemy created with strength " << this->strength << endl;
        active++;
      } //
      ~Enemy() { // destructor
        cout << "Enemy destroyed." << endl;
        active--;
      }
      int attack() {
        return this->strength/2;
      }
      static int getActive() {
        return active;
      }
    };

    int Enemy::active = 0;
    int main(void)
    {
      { // BEGIN battle
        Enemy Sauron(80);
        Enemy Saruman(100);
        cout << "Enemies active: " << Enemy::getActive() << endl;
        cout << "Attack damage: " << Sauron.attack() << endl;
      } // END battle
      cout << "Enemies active: " << Enemy::getActive() << endl;
      return 0;
    }
  #+end_src

  #+RESULTS:
  : Enemy created with strength 80
  : Enemy created with strength 100
  : Enemies active: 2
  : Attack damage: 40
  : Enemy destroyed.
  : Enemy destroyed.
  : Enemies active: 0

* Summary: Object Lifecycle in C++

- *Construction*: Objects are automatically initialized using a
  *constructor* when declared.
  + Example: =Player John(100);= runs the =Player(int)= constructor.
  + Constructors can take parameters or use initializer lists for
    clean, direct setup.

- *Usage / Lifetime*: Objects remain alive and usable for the duration
  of their *scope*.
  + Methods like =takeDamage()= or =getHealth()= operate on the object
    during this phase.
  + The ~this~ pointer refers to the current object and is used to
    access members clearly.

- *Destruction*: When an object goes *out of scope*, its *destructor* is
  automatically called.
  + Used to log destruction or clean up memory/resources.
  + Order of destruction is the reverse of construction — last-in,
    first-out (LIFO).

- *Static Members & Lifecycle Awareness*:
  + Use static counters (e.g., =Player::count=) to track how many
    objects are alive.
  + Static methods (like =getCount()=) can observe lifecycle changes
    from outside any object.

- *Scopes Reveal Lifecycle Timing*:
  + Wrapping object creation in a nested block (= { ... } =) shows
    *when* the destructor runs.
  + Helpful for visualizing stack-based memory and RAII (Resource
    Acquisition Is Initialization).

- *Why It Matters*:
  + Predictable object lifetimes help avoid memory leaks and bugs.
  + C++ gives fine-grained control — unlike garbage-collected
    languages.
  + Mastering lifecycle is foundational for managing resources,
    especially in larger programs.

* Footnotes

[fn:1] "Scale" is what distinguishes learning from production: When
you're learning you craft small pieces of code hoping it will run at
all for you alone, on your single computer. When you're creating
production code, you write (or monitor, or maintain, more likely),
large collections of code that runs on millions, or billions of
computers, and that must run safely and smoothly. That is "scale".

[fn:2] The Unix epoch is 00:00:00 UTC on January 1, 1970. Computer
(system) time is measured as the number of seconds that have elapsed
since this moment (Unix timestamp or epoch time).
